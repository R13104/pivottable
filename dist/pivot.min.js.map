{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","rd","renderers","rx","rz","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","call","numInputs","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","a1","b1","nas","nbs","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","input","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","rowOrder","colOrder","derivedAttributes","filter","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","processRecord","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","r","c","flatColKey","flatRowKey","len2","fromCharCode","agg","pivotUtilities","pivotData","getClickHandler","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","table","clickCallback","rowValues","colValues","filters","e","document","createElement","className","arr","len","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","onclick","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","addNewRow","addNewSlice","attrLength","attrValues","colOrderArrow","existingOpts","fn1","initialRender","len3","materializedInput","o","ordering","pivotTable","pivotTableTr1Td1","pivotTableTr1Td2","recordsProcessed","refresh","refresh1","refreshDelayed","refreshDelayed1","refreshPlot","rendererControl","rowOrderArrow","selectOptions","shownAttributes","tdAdded","tdDividedIntoTwoTd","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","appendTo","accept","accept_gen","trim","accepted","real_filter","substring","startsWith","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","addNewRowInsidePivotTable","rowId","now","click","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","unusedAttrsContainer","log","remove","not","excludedItems","inclusionsInfo","rendererName","children","setTimeout","prepend","inArray","sortable","update","ui","sender","connectWith","items"],"mappings":"CAAA,WAAA,GAAAA,GAAAC,KAAAA,SAAA,SAAAC,GAAA,IAAA,GAAAC,GAAA,EAAAC,EAAAC,KAAAC,OAAAH,EAAAC,EAAAD,IAAA,GAAAA,IAAAE,OAAAA,KAAAF,KAAAD,EAAA,MAAAC,EAAA,WCGII,KAAWA,MACXC,EAAO,SAASC,EAAIC,GAAK,MAAO,YAAY,MAAOD,GAAGE,MAAMD,EAAIE,aAChEC,KAAaC,gBDLjBd,EAAiB,SAACe,GACd,MAAqB,gBAAXC,UAAyC,gBAAVC,QACrCF,EAAYG,QAAQ,WACC,kBAAVC,SAAyBA,OAAOC,IAC3CD,QAAQ,UAAWJ,GAGnBA,EAAYM,UAEL,SAACC,GAEZ,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CC2pCA,ODvpCAnB,GAAgB,SAACoB,EAAMC,EAAcC,GACjC,GAAAC,GAAAC,EAAAC,EAAAC,CAKiD,KALjDN,GAAQ,GACRI,EAAIJ,EAAKO,MAAM,KACfF,EAAKD,EAAE,GACPE,EAAQF,EAAE1C,OAAS,EAAQwC,EAAaE,EAAE,GAAQ,GAClDD,EAAM,eACiDA,EAAIK,KAAKH,IAAhEA,EAAKA,EAAGI,QAAQN,EAAK,KAAOF,EAAe,KAC3C,OAAOI,GAAKC,GAEhBjB,EAAe,SAACqB,GACZ,GAAAC,ECsBF,ODtBEA,IACIC,mBAAoB,EAAGC,OAAQ,EAC/BZ,aAAc,IAAKC,WAAY,IAC/BY,OAAQ,GAAIC,OAAQ,GACpBC,UAAU,GACdN,EAAOhC,EAAEuC,UAAWN,EAAUD,GAC9B,SAACN,GACG,GAAAc,EAAA,OAAaC,OAAMf,KAAUgB,SAAShB,GAA/B,GACW,IAALA,GAAeM,EAAKM,UACjCE,EAAStC,GAAe8B,EAAKG,OAAOT,GAAGiB,QAAQX,EAAKE,oBAAqBF,EAAKT,aAAcS,EAAKR,YAC1F,GAAGQ,EAAKI,OAAOI,EAAOR,EAAKK,QAF3B,KAKfnB,EAAQP,IACRQ,EAAWR,GAAauB,mBAAoB,IAC5Cd,EAAWT,GAAauB,mBAAmB,EAAGC,OAAQ,IAAKE,OAAQ,MAEnElC,GACIyC,MAAO,SAACC,GC8BR,MAHiB,OAAbA,ID3BIA,EAAU1B,GAAa,WC+B7B,MD/BmC,UAAC2B,EAAMC,EAAQC,GCgChD,OD/BAJ,MAAO,EACPK,KAAO,WCiCH,MDjCMlE,MAAC6D,SACXM,MAAO,WCmCH,MDnCMnE,MAAC6D,OACXO,OAAQN,MAEZO,QAAS,SAACjE,EAAI0D,GC2Cd,MAHiB,OAAbA,IDxCUA,EAAU1B,GAAa,SAACkC,GAAW,GAAAC,EC8C/C,OD9CqCA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GC+C5D,OD9CAO,QACAN,KAAM,SAACO,GAAW,GAAAC,EAAA,IAAAA,EAA4BD,EAAOF,GAAP3E,EAAA+E,KAAoB3E,KAACwE,KAArBE,GAAA,ECkDxC,MDlDY1E,MAACwE,KAAKN,KAAKO,EAAOF,KACpCJ,MAAO,WCqDH,MDrDM/D,GAAGJ,KAACwE,OACdJ,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpCM,IAAK,SAACf,GC6DN,MAHiB,OAAbA,ID1DEA,EAAU3B,GAAU,SAACmC,GAAW,GAAAC,ECgEpC,ODhE0BA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCiEjD,ODhEAY,IAAK,EACLX,KAAM,SAACO,GAAW,IAAwCf,MAAMoB,WAAWL,EAAOF,KCmE5E,MDnEYvE,MAAC6E,KAAOC,WAAWL,EAAOF,KAC5CJ,MAAO,WCsEH,MDtEMnE,MAAC6E,KACXT,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpCQ,SAAU,SAACC,EAAMlB,GC8EjB,MAHiB,OAAbA,ID3EaA,EAAU3B,GAAU,SAACmC,GAAW,GAAAC,ECiF/C,ODjFqCA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCkF5D,ODjFAgB,IAAK,KACLC,OAAQ1D,EAAA,MAAAuC,EAAQA,EAAMoB,QAAA,OAASZ,GAC/BL,KAAM,SAACO,GACH,GAAAC,GAAAU,EAAAC,EAAA1C,CAKA,IALAA,EAAI8B,EAAOF,GACC,QAATS,GAAgB,QAAhBA,IACCrC,EAAImC,WAAWnC,GACRe,MAAMf,KAAO3C,KAACiF,IAAMK,KAAKN,GAAMrC,EAAX,OAAA+B,EAAA1E,KAAAiF,KAAAP,EAAqB/B,KACzC,UAARqC,GAAiChF,KAACkF,OAAOvC,EAAR,OAAAyC,EAAApF,KAAAiF,KAAAG,EAAkBzC,IAAM,IAApC3C,KAACiF,IAAMtC,GACpB,SAARqC,GAAiChF,KAACkF,OAAOvC,EAAR,OAAA0C,EAAArF,KAAAiF,KAAAI,EAAkB1C,IAAM,EC4FxD,MD5FoB3C,MAACiF,IAAMtC,GACnCwB,MAAO,WCgGH,MDhGMnE,MAACiF,KACXb,OAAQ,SAACzB,GAAM,MAAGe,OAAMf,GAAQA,EAAOmB,EAAUnB,IACjDiC,UAAc,MAAAL,EAAW,EAAO,MAEpCgB,SAAU,SAACC,EAAG1B,GC8Gd,MAHiB,OAAbA,ID3GUA,EAAU3B,GAAU,SAACmC,GAAW,GAAAC,ECiH5C,ODjHkCA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GCkHzD,ODjHAwB,QACAvB,KAAM,SAACO,GACH,GAAA9B,EACA,IADAA,EAAImC,WAAWL,EAAOF,KACDb,MAAMf,GCoHzB,MDpHF3C,MAACyF,KAAKvB,KAAKvB,IACfwB,MAAO,WACH,GAAArE,EAAA,OAA+B,KAAhBE,KAACyF,KAAKxF,OAAd,MACPD,KAACyF,KAAKC,KAAK,SAACC,EAAEC,GC0HZ,MD1HkBD,GAAEC,IACtB9F,GAAKE,KAACyF,KAAKxF,OAAO,GAAGuF,GACbxF,KAACyF,KAAKH,KAAKO,MAAM/F,IAAME,KAACyF,KAAKH,KAAKQ,KAAKhG,KAAK,IACxDsE,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpCwB,YAAa,SAACf,EAAagB,EAAQlC,GCyInC,MATY,OAARkB,IDhIUA,EAAK,QCmIP,MAARgB,IDnIuBA,EAAK,GCsIf,MAAblC,IDtI+BA,EAAU3B,GAAU,SAACmC,GAAW,GAAAC,EC4IjE,OD5IuDA,GAADD,EAAA,GAAW,SAACP,EAAMC,EAAQC,GC6I9E,OD5IAgC,EAAG,EAAKC,EAAG,EAAKC,EAAG,EACnBjC,KAAM,SAACO,GACH,GAAA2B,GAAAzD,CACA,IADAA,EAAImC,WAAWL,EAAOF,KACZb,MAAMf,GAEhB,MADA3C,MAACiG,GAAK,EACG,IAANjG,KAACiG,EACAjG,KAACkG,EAAIvD,GAELyD,EAAQpG,KAACkG,GAAKvD,EAAI3C,KAACkG,GAAGlG,KAACiG,EACvBjG,KAACmG,EAAInG,KAACmG,GAAKxD,EAAI3C,KAACkG,IAAIvD,EAAIyD,GACxBpG,KAACkG,EAAIE,IACbjC,MAAO,WACH,GAAW,SAARa,EACQ,MAAS,KAANhF,KAACiG,EAAY,IAASjG,KAACkG,CACrC,IAAYlG,KAACiG,GAAKD,EAAlB,MAAO,EACP,QAAOhB,GAAP,IACS,MC4JL,MD5JkBhF,MAACmG,GAAGnG,KAACiG,EAAED,EAD7B,KAES,QC6JL,MD7JkBV,MAAKe,KAAKrG,KAACmG,GAAGnG,KAACiG,EAAED,MAC3C5B,OAAQN,EACRc,UAAc,MAAAL,EAAW,EAAO,MAEpC+B,WAAY,SAACxC,GCsKb,MAHiB,OAAbA,IDnKSA,EAAU3B,GAAU,SAACmC,GAAiB,GAAAiC,GAAAC,CCyKjD,ODzKiCA,GAAAlC,EAAA,GAAKiC,EAAAjC,EAAA,GAAW,SAACP,EAAMC,EAAQC,GC0K9D,ODzKAwC,OAAQ,EACRC,SAAU,EACVxC,KAAM,SAACO,GAEH,GAD8Cf,MAAMoB,WAAWL,EAAO+B,OAAtExG,KAACyG,QAAY3B,WAAWL,EAAO+B,MACe9C,MAAMoB,WAAWL,EAAO8B,KC6KpE,MD7KFvG,MAAC0G,UAAY5B,WAAWL,EAAO8B,KACnCpC,MAAO,WCgLH,MDhLMnE,MAACyG,OAAOzG,KAAC0G,UACnBtC,OAAQN,EACRc,UAAc,MAAA4B,GAAS,MAAAD,EAAY,EAAO,MAE9CI,kBAAmB,SAACC,EAAY9C,GC2LhC,MANa,OAAT8C,IDrLgBA,GAAM,GCwLT,MAAb9C,IDxL4BA,EAAU3B,GAAU,SAACmC,GAAiB,GAAAiC,GAAAC,CC8LpE,OD9LoDA,GAAAlC,EAAA,GAAKiC,EAAAjC,EAAA,GAAW,SAACP,EAAMC,EAAQC,GC+LjF,OD9LAwC,OAAQ,EACRC,SAAU,EACVxC,KAAM,SAACO,GAEH,GAD8Cf,MAAMoB,WAAWL,EAAO+B,OAAtExG,KAACyG,QAAY3B,WAAWL,EAAO+B,MACe9C,MAAMoB,WAAWL,EAAO8B,KCkMpE,MDlMFvG,MAAC0G,UAAY5B,WAAWL,EAAO8B,KACnCpC,MAAO,WACH,GAAA0C,ECsMA,ODtMAA,GAAUD,EAAW,MACpB,iBAAkB5G,KAAC0G,SAAW1G,KAACyG,OAAOzG,KAAC0G,SAAW,mBAAmBG,EAClEvB,KAAKe,KAAK,kBAAoBrG,KAAC0G,SAAS1G,KAAC0G,UAAa1G,KAACyG,QAAQ,EAAIzG,KAACyG,OAAQzG,KAAC0G,WAAa1G,KAAC0G,SAAS1G,KAAC0G,aACpG,EAAI,kBAAkB1G,KAAC0G,WAChCtC,OAAQN,EACRc,UAAc,MAAA4B,GAAS,MAAAD,EAAY,EAAO,MAE9CO,WAAY,SAACC,EAASC,EAAclD,GC8MpC,MANY,OAARkD,IDxMkBA,EAAK,SC2MV,MAAblD,ID3MgCA,EAAUzB,GAAa,WAAU,GAAAM,ECiNnE,ODjN0DA,GAAA,GAAApC,UAAAN,OAAAC,EAAAyE,KAAApE,UAAA,MAAS,SAACwD,EAAMC,EAAQC,GCkNhF,ODjNAgD,UAAWC,cAAcC,KAAKnD,MAAWoD,QAAQnD,IAAS+C,GAC1DK,MAAON,EAAAzG,MAAA,KAAQqC,GAAMoB,EAAMC,EAAQC,GACnCC,KAAM,SAACO,GCuNH,MDvNczE,MAACqH,MAAMnD,KAAKO,IAC9BL,OAAQN,EACRK,MAAO,WCyNH,MDzNMnE,MAACqH,MAAMlD,QAAUJ,EAAKuD,cAALhH,MAAAyD,EAAmB/D,KAACiH,UAAaI,MAAMlD,SAClES,UAAWmC,EAAAzG,MAAA,KAAQqC,KAAQiC,eAEnCxD,EAAoBmG,YAAc,SAACC,GC+NjC,MD/NuCpG,GAAoBiD,QAAQ,SAAE1B,GCgOnE,MDhOyEA,GAAE1C,QAASuH,IACxFpG,EAAoBqG,WAAc,SAACtB,GCmOjC,MDnOuC/E,GAAoBiD,QAAQ,SAAE1B,GCoOnE,MDpOyEA,GAAE+E,KAAKvB,IAAK,SAAExD,GCsOvF,MDtO2FA,MAC/FvB,EAAoBuG,IAAc,SAACH,GCyOjC,MDzOuCpG,GAAoB2D,SAAS,MAAOyC,IAC7EpG,EAAoBwG,IAAc,SAACJ,GC2OjC,MD3OuCpG,GAAoB2D,SAAS,MAAOyC,IAC7EpG,EAAoByG,MAAc,SAACL,GC6OjC,MD7OuCpG,GAAoB2D,SAAS,QAASyC,IAC/EpG,EAAoB0G,KAAc,SAACN,GC+OjC,MD/OuCpG,GAAoB2D,SAAS,OAAQyC,IAC9EpG,EAAoB2G,OAAc,SAACP,GCiPjC,MDjPuCpG,GAAoBmE,SAAS,GAAKiC,IAC3EpG,EAAoB4G,QAAc,SAACR,GCmPjC,MDnPuCpG,GAAoB2E,YAAY,OAAQ,EAAGyB,IACpFpG,EAAmB,OAAe,SAAC4E,EAAMwB,GCqPvC,MDrP6CpG,GAAoB2E,YAAY,MAAOC,EAAMwB,IAC5FpG,EAAoB6G,MAAc,SAACjC,EAAMwB,GCuPvC,MDvP6CpG,GAAoB2E,YAAY,QAASC,EAAMwB,IAG9FnG,EAAiB,SAAC6G,GCuPhB,ODtPEC,MAAwBD,EAAIrE,MAAMzB,GAClCgG,sBAAwBF,EAAIX,YAAYnF,GACxCiG,qBAAwBH,EAAIT,WAAW,MACvCa,IAAwBJ,EAAIrD,IAAI1C,GAChCoG,cAAwBL,EAAIrD,IAAIzC,GAChCoG,QAAwBN,EAAIF,QAAQ7F,GACpCsG,OAAwBP,EAAIH,OAAO5F,GACnCuG,kBAAwBR,EAAG,OAAK,EAAG/F,GACnCwG,4BAA6BT,EAAID,MAAM,EAAG9F,GAC1CyG,QAAwBV,EAAIN,IAAIzF,GAChC0G,QAAwBX,EAAIP,IAAIxF,GAChC2G,MAAwBZ,EAAIL,MAAM1F,GAClC4G,KAAwBb,EAAIJ,KAAK3F,GACjC6G,eAAwBd,EAAI5B,WAAWnE,GACvC8G,kBAAwBf,EAAIvB,mBAAkB,EAAMxE,GACpD+G,kBAAwBhB,EAAIvB,mBAAkB,EAAOxE,GACrDgH,2BAAgCjB,EAAIpB,WAAWoB,EAAIrD,MAAS,QAASxC,GACrE+G,0BAAgClB,EAAIpB,WAAWoB,EAAIrD,MAAS,MAASxC,GACrEgH,6BAAgCnB,EAAIpB,WAAWoB,EAAIrD,MAAS,MAASxC,GACrEiH,6BAAgCpB,EAAIpB,WAAWoB,EAAIrE,QAAS,QAASxB,GACrEkH,4BAAgCrB,EAAIpB,WAAWoB,EAAIrE,QAAS,MAASxB,GACrEmH,+BAAgCtB,EAAIpB,WAAWoB,EAAIrE,QAAS,MAASxB,KAtBjDjB,GAwBxBW,GACI0H,MAAkB,SAAC1F,EAAMd,GCyPzB,MDzPoCpB,GAAmBkC,EAAMd,IAC7DyG,iBAAkB,SAAC3F,EAAMd,GC2PzB,MD3PkChC,GAAEY,EAAmBkC,EAAMd,IAAO0G,YACpEC,QAAkB,SAAC7F,EAAMd,GC6PzB,MD7PkChC,GAAEY,EAAmBkC,EAAMd,IAAO4G,QAAQ,UAAc5G,IAC1F6G,cAAkB,SAAC/F,EAAMd,GC+PzB,MD/PkChC,GAAEY,EAAmBkC,EAAMd,IAAO4G,QAAQ,aAAc5G,IAC1F8G,cAAkB,SAAChG,EAAMd,GCiQzB,MDjQkChC,GAAEY,EAAmBkC,EAAMd,IAAO4G,QAAQ,aAAc5G,KAE9FxB,GACIuI,IACI3I,YAAaA,EACbU,UAAWA,EACXkI,eACIC,YAAa,sDACbC,aAAc,sDACdC,cAAe,iDACfC,UAAW,aACXC,WAAY,cACZC,QAAS,qBACTC,cAAe,gBACflK,MAAO,QACPmK,OAAQ,SACRC,OAAQ,SACRC,GAAI,KACJC,GAAI,QAGhBlJ,GAAc,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAChFJ,GAAc,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAClDgB,EAAU,SAACuI,GCoQT,ODpQqB,IAAIA,GAAQC,UAAU,IAE7CvJ,GACIwJ,IAAK,SAAC3D,EAAK4D,GCqQX,MDrQwB,UAACvG,GCsQvB,MDtQkCA,GAAO2C,GAAO3C,EAAO2C,GAAO4D,IAChEC,WAAY,SAAC7D,EAAK8D,EAAcC,EAAiBC,EAAqBC,GAClE,GAAAC,ECmRJ,OAViB,OAAbH,ID1Q4BA,GAAU,GC6Q1B,MAAZC,ID7Q6CA,EAAS1J,GCgR1C,MAAZ2J,IDhRkEA,EAAS/J,GAC3EgK,EAASH,EAAe,MAAW,GACnC,SAAC1G,GACG,GAAA8G,EACA,OADAA,GAAO,GAAIC,MAAKA,KAAKC,MAAMhH,EAAO2C,KAC/B1D,MAAM6H,GAAkB,GAC3BL,EAAalI,QAAQ,QAAS,SAACkD,EAAGwF,GAC9B,OAAOA,GAAP,IACS,ICsRb,MDtRsBH,GAAK,MAAMD,EAAI,aADjC,KAES,ICuRb,MDvRsBhJ,GAAQiJ,EAAK,MAAMD,EAAI,WAAU,EAFnD,KAGS,ICwRb,MDxRsBF,GAASG,EAAK,MAAMD,EAAI,WAH1C,KAIS,ICyRb,MDzRsBhJ,GAAQiJ,EAAK,MAAMD,EAAI,UAJzC,KAKS,IC0Rb,MD1RsBD,GAASE,EAAK,MAAMD,EAAI,SAL1C,KAMS,IC2Rb,MD3RsBC,GAAK,MAAMD,EAAI,QANjC,KAOS,IC4Rb,MD5RsBhJ,GAAQiJ,EAAK,MAAMD,EAAI,WAPzC,KAQS,IC6Rb,MD7RsBhJ,GAAQiJ,EAAK,MAAMD,EAAI,aARzC,KASS,IC8Rb,MD9RsBhJ,GAAQiJ,EAAK,MAAMD,EAAI,aATzC,SCySJ,MD/Ra,IAAMI,QAE/B1J,EAAK,eACLF,EAAK,KACLG,EAAK,KACLN,EAAc,SAAAgK,GCoSZ,MDpSY,UAACC,EAAIC,GAEf,GAAAlG,GAAAmG,EAAAlG,EAAAmG,EAAAC,EAAAC,CAAA,IAAa,MAAAJ,GAAY,MAAAD,EAAzB,QACA,IAAa,MAAAA,GAAY,MAAAC,EAAzB,MAAQ,EAGR,IAA0B,gBAAND,IAAmBlI,MAAMkI,GAA7C,QACA,IAA0B,gBAANC,IAAmBnI,MAAMmI,GAA7C,MAAQ,EAKR,IAFAG,GAAOJ,EACPK,GAAOJ,EACMG,EAAMC,EAAnB,QACA,IAAaD,EAAMC,EAAnB,MAAQ,EAGR,IAA0B,gBAANL,IAAgC,gBAANC,GAA9C,QACA,IAA0B,gBAANA,IAAgC,gBAAND,GAA9C,MAAQ,EACR,IAA0B,gBAANA,IAAgC,gBAANC,GAA9C,MAAQ,EAGR,IAAanI,MAAMuI,KAAavI,MAAMsI,GAAtC,QACA,IAAatI,MAAMsI,KAAatI,MAAMuI,GAAtC,MAAQ,EAKR,IAFAtG,EAAIuG,OAAON,GACXhG,EAAIsG,OAAOL,GACClG,IAAKC,EAAjB,MAAO,EACP,KAAwC9D,EAAGiB,KAAK4C,KAAO7D,EAAGiB,KAAK6C,GAA/D,MAAWD,GAAIC,EAAO,IAKtB,KAFAD,EAAIA,EAAEwG,MAAMnK,GACZ4D,EAAIA,EAAEuG,MAAMnK,GACN2D,EAAE1F,QAAW2F,EAAE3F,QAGjB,GAFA6L,EAAKnG,EAAEyG,QACPL,EAAKnG,EAAEwG,QACJN,IAAMC,EACL,MAAGjK,GAAGiB,KAAK+I,IAAQhK,EAAGiB,KAAKgJ,GAChBD,EAAG9I,QAAQf,EAAI,MAAQ8J,EAAG/I,QAAQf,EAAI,MAElC6J,EAAKC,EAAQ,IACpC,OAAOpG,GAAE1F,OAAS2F,EAAE3F,SAzCVD,MA2CdkC,EAAS,SAACmK,GACN,GAAAvM,GAAAwM,EAAAC,EAAA5J,CAAA4J,MACAD,IACA,KAAAxM,IAAAuM,GCwTA1J,EAAI0J,EAAMvM,GDvTNyM,EAAQ5J,GAAK7C,EACiC,gBAAL6C,KAAzC2J,EAAU3J,EAAE6J,eAAiB1M,EC4TnC,OD3TE,UAAC6F,EAAGC,GACA,MAAG,OAAA2G,EAAA5G,IAAgB,MAAA4G,EAAA3G,GAAiB2G,EAAQ5G,GAAK4G,EAAQ3G,GACjD,MAAA2G,EAAA5G,MACA,MAAA4G,EAAA3G,GAAiB,EACjB,MAAA0G,EAAA3G,IAAkB,MAAA2G,EAAA1G,GAAmB0G,EAAU3G,GAAK2G,EAAU1G,GAC9D,MAAA0G,EAAA3G,MACA,MAAA2G,EAAA1G,GAAmB,EACtBjE,EAAYgE,EAAEC,KAE3BpE,EAAU,SAAC2D,EAASZ,GAChB,GAAAmB,EAAA,IAAG,MAAAP,EACC,GAAGlE,EAAEwL,WAAWtH,IAEZ,GADAO,EAAOP,EAAQZ,GACAtD,EAAEwL,WAAW/G,GAA5B,MAAOA,OACN,IAAG,MAAAP,EAAAZ,GACJ,MAAOY,GAAQZ,EACvB,OAAO5C,IAMLT,EAAA,WACW,QAAAA,GAACwL,EAAOzJ,GACjB,GAAAyB,GAAAU,EAAAC,EAAAsH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CC0UQ,OAARhK,ID3UiBA,MC8UrBjD,KAAKsH,cAAgBnH,EAAKH,KAAKsH,cAAetH,MAC9CA,KAAKkN,WAAa/M,EAAKH,KAAKkN,WAAYlN,MACxCA,KAAKmN,WAAahN,EAAKH,KAAKmN,WAAYnN,MACxCA,KAAKoN,SAAWjN,EAAKH,KAAKoN,SAAUpN,MACpCA,KAAKqN,QAAUlN,EAAKH,KAAKqN,QAASrN,MDjV9BA,KAAC0M,MAAQA,EACT1M,KAACsN,WAAD,OAAA5I,EAAAzB,EAAAqK,YAAA5I,EAAgCtD,EAAoByC,UACpD7D,KAACuN,eAAD,OAAAnI,EAAAnC,EAAAsK,gBAAAnI,EAAwC,QACxCpF,KAACwN,SAAD,OAAAnI,EAAApC,EAAAwK,MAAApI,KACArF,KAAC0N,SAAD,OAAAf,EAAA1J,EAAA0K,MAAAhB,KACA3M,KAAC4N,SAAD,OAAAhB,EAAA3J,EAAAwC,MAAAmH,KACA5M,KAACmF,QAAD,OAAA0H,EAAA5J,EAAAkC,SAAA0H,KACA7M,KAAC6N,SAAD,OAAAf,EAAA7J,EAAA4K,UAAAf,EAA4B,aAC5B9M,KAAC8N,SAAD,OAAAf,EAAA9J,EAAA6K,UAAAf,EAA4B,aAC5B/M,KAAC+N,kBAAD,OAAAf,EAAA/J,EAAA8K,mBAAAf,KACAhN,KAACgO,OAAD,OAAAf,EAAAhK,EAAA+K,QAAAf,EAAwB,WCmV1B,ODnV8B,GAC5BjN,KAACiO,QACDjO,KAACkO,WACDlO,KAACmO,WACDnO,KAACoO,aACDpO,KAACqO,aACDrO,KAACsO,SAAWtO,KAACsN,WAAWtN,YACxBA,KAACuO,QAAS,EAGVrN,EAAUsN,cAAcxO,KAAC0M,MAAO1M,KAAC+N,kBAAmB,SAAApC,GCmVtD,MDnVsD,UAAClH,GACjD,GAA0BkH,EAACqC,OAAOvJ,GCoVpC,MDpVEkH,GAAC8C,cAAchK,KADiCzE,OC2jB1D,MDvjBEkB,GAACsN,cAAgB,SAAC9B,EAAOqB,EAAmBvG,GACxC,GAAAkH,GAAAC,EAAA7O,EAAA8O,EAAAC,EAAA9O,EAAA+O,EAAArK,EAAAC,EAAAqK,EAAAC,EAAAC,CAQA,IAPIP,EADDzN,EAAEiO,cAAcnB,GACHvG,EAEA,SAAC/C,GACT,GAAAoK,GAAAnK,EAAAyK,CAAA,KAAAN,IAAAd,GC0VNoB,EAAIpB,EAAkBc,GD1VhBpK,EAAOoK,GAAP,OAAAnK,EAAAyK,EAAA1K,IAAAC,EAAwBD,EAAOoK,EC6VvC,OD5VQrH,GAAE/C,IAGPxD,EAAEwL,WAAWC,GC6VlB,MD5VMA,GAAMgC,EACL,IAAGzN,EAAEmO,QAAQ1C,GAAb,CACD,GAAGzL,EAAEmO,QAAQ1C,EAAM,IAAnB,CACIqC,IC6VR,KD7VQjP,IAAA4M,GC8VN,GAAKlM,EAAQmE,KAAK+H,EAAO5M,KACzB6O,EAAgBjC,EAAM5M,GD/VuBA,EAAI,GCgWjD,CD/VU2E,KACAC,EAAAgI,EAAA,EAAA,KAAAkC,IAAAlK,GCoWHlE,EAAQmE,KAAKD,EAAKkK,KACvBC,EAAInK,EAAIkK,GDrWAnK,EAAOoK,GAAKF,EAAcC,GCwWpCG,GAAQ7K,KDvWEwK,EAAUjK,ICyWtB,MAAOsK,GAGP,ID1WQC,KAAAjP,EAAA,EAAA+O,EAAApC,EAAAzM,OAAAF,EAAA+O,EAAA/O,IC2WN0E,EAASiI,EAAM3M,GACfiP,EAAS9K,KD5WHwK,EAAUjK,GC8WlB,OAAOuK,GD7WF,GAAGtC,YAAiB1L,QCoX3B,MDnXMiO,MACAhO,EAAE,kBAAmByL,GAAO2C,KAAK,SAACvP,GCgXtC,MDhX4CmP,GAAQ/K,KAAKjD,EAAEjB,MAAMsP,UAC7DrO,EAAE,aAAcyL,GAAO2C,KAAK,SAACvP,GCsXjC,MDrXQ2E,MACAxD,EAAE,KAAMjB,MAAMqP,KAAK,SAACT,GCkX1B,MDlXgCnK,GAAOwK,EAAQL,IAAM3N,EAAEjB,MAAMsP,SACvDZ,EAAUjK,IAEd,MAAM,IAAI8K,OAAM,yBCwX1BrO,EAAUsO,UDtXRC,sBAAuB,SAACC,EAAUC,GCuXlC,MDtXIzO,GAAUsN,cAAcxO,KAAC0M,MAAO1M,KAAC+N,kBAAmB,SAAApC,GCuXtD,MDvXsD,UAAClH,GACjD,GAAAoK,GAAAnK,EAAAyK,CAAA,IAAcxD,EAACqC,OAAOvJ,GAAtB,CACA,IAAAoK,IAAAa,GACI,GC0XNP,EAAIO,EAASb,GD1XGM,KAAK,OAAAzK,EAAAD,EAAAoK,IAAAnK,EAAa,QAA5B,MC+XR,OD9XIiL,GAASlL,MAJuCzE,QCuY1DkB,EAAUsO,UDjYRnC,QAAS,SAACuC,GACN,GAAAjK,GAAAkK,CC2YJ,OD3YIA,GAAA,WCmYF,GAAI9P,GAAG+O,EAAMC,CAEb,KDrYgBA,KAAAhP,EAAA,EAAA+O,EAAAc,EAAA3P,OAAAF,EAAA+O,EAAA/O,ICsYd4F,EAAIiK,EAAM7P,GACVgP,EAAQ7K,KDvYM1C,EAAQxB,KAACmF,QAASQ,GCyYlC,OAAOoJ,IACNpK,KAAK3E,MDzYJ,SAAC2F,EAAEC,GACC,GAAAkK,GAAAhQ,EAAAoF,CAAA,KAAApF,IAAA+P,GC4YJ,GAAKrP,EAAQmE,KAAKkL,EAAY/P,KAC9BoF,EAAS2K,EAAW/P,GD5YZgQ,EAAa5K,EAAOS,EAAE7F,GAAI8F,EAAE9F,IACO,IAAdgQ,GAArB,MAAOA,EACX,OAAO,KCoZjB5O,EAAUsO,UDlZRpC,SAAU,WACN,GAAA+B,EAAA,KAAOnP,KAACuO,OAAR,CAGI,OAFAvO,KAACuO,QAAS,EACVY,EAAI,SAAAxD,GCoZR,MDpZQ,UAACoE,EAAEC,GCqZT,MDrZerE,GAACrE,cAAcyI,EAAEC,GAAG7L,UAA7BnE,MACGA,KAAC6N,UAAR,IACS,eAAqB7N,KAACkO,QAAQxI,KAAK,SAAAiG,GCyZ5C,MDzZ4C,UAAChG,EAAEC,GC0Z7C,MD1ZoDjE,GAAYwN,EAAExJ,MAAOwJ,EAAEvJ,SAAjC5F,MAAnC,MADT,KAES,eAAoBA,KAACkO,QAAQxI,KAAK,SAAAiG,GC+Z3C,MD/Z2C,UAAChG,EAAEC,GCga5C,ODhamDjE,EAAYwN,EAAExJ,MAAOwJ,EAAEvJ,SAAjC5F,MAAlC,MAFT,SAGqBA,KAACkO,QAAQxI,KAAK1F,KAACqN,QAAQrN,KAAC0N,WAC7C,OAAO1N,KAAC8N,UAAR,IACS,eCsaX,MDtagC9N,MAACmO,QAAQzI,KAAK,SAAAiG,GCua5C,MDva4C,UAAChG,EAAEC,GCwa7C,MDxaoDjE,GAAYwN,KAAKxJ,GAAIwJ,KAAKvJ,MAApC5F,MAD5C,KAES,eC2aX,MD3a+BA,MAACmO,QAAQzI,KAAK,SAAAiG,GC4a3C,MD5a2C,UAAChG,EAAEC,GC6a5C,OD7amDjE,EAAYwN,KAAKxJ,GAAIwJ,KAAKvJ,MAApC5F,MAF3C,SCmbF,MDhbuBA,MAACmO,QAAQzI,KAAK1F,KAACqN,QAAQrN,KAACwN,cCqbvDtM,EAAUsO,UDnbRrC,WAAY,WAER,MADAnN,MAACoN,WACMpN,KAACmO,SCsbdjN,EAAUsO,UDpbRtC,WAAY,WAER,MADAlN,MAACoN,WACMpN,KAACkO,SCubdhN,EAAUsO,UDrbRf,cAAe,SAAChK,GACZ,GAAAR,GAAAgM,EAAAC,EAAAnQ,EAAA+O,EAAAqB,EAAAlK,EAAAvB,EAAAU,EAAAC,EAAAsH,EAAA3I,EAAArB,CAEA,KAFAsB,KACAD,KACAU,EAAA1E,KAAAwN,SAAAzN,EAAA,EAAA+O,EAAApK,EAAAzE,OAAAF,EAAA+O,EAAA/O,ICwbF4C,EAAI+B,EAAI3E,GDxbNkE,EAAOC,KAAP,OAAAkB,EAAAX,EAAA9B,IAAAyC,EAAwB,OACxB,KAAAC,EAAArF,KAAA0N,SAAAzH,EAAA,EAAAkK,EAAA9K,EAAApF,OAAAgG,EAAAkK,EAAAlK,IC4bFtD,EAAI0C,EAAKY,GD5bPjC,EAAOE,KAAP,OAAAyI,EAAAlI,EAAA9B,IAAAgK,EAAwB,OAkBxB,IAjBAuD,EAAalM,EAAO0D,KAAKwE,OAAOkE,aAAa,IAC7CH,EAAahM,EAAOyD,KAAKwE,OAAOkE,aAAa,IAE7CpQ,KAACsO,SAASpK,KAAKO,GAEK,IAAjBT,EAAO/D,SACCD,KAACoO,UAAU8B,KACdlQ,KAACkO,QAAQhK,KAAKF,GACdhE,KAACoO,UAAU8B,GAAclQ,KAACsN,WAAWtN,KAAMgE,OAC/ChE,KAACoO,UAAU8B,GAAYhM,KAAKO,IAEZ,IAAjBR,EAAOhE,SACCD,KAACqO,UAAU4B,KACdjQ,KAACmO,QAAQjK,KAAKD,GACdjE,KAACqO,UAAU4B,GAAcjQ,KAACsN,WAAWtN,QAAUiE,IACnDjE,KAACqO,UAAU4B,GAAY/L,KAAKO,IAEZ,IAAjBR,EAAOhE,QAAiC,IAAjB+D,EAAO/D,OCqcnC,MDpcaD,MAACiO,KAAKiC,KACTlQ,KAACiO,KAAKiC,OACHlQ,KAACiO,KAAKiC,GAAYD,KACrBjQ,KAACiO,KAAKiC,GAAYD,GAAcjQ,KAACsN,WAAWtN,KAAMgE,EAAQC,IAC9DjE,KAACiO,KAAKiC,GAAYD,GAAY/L,KAAKO,ICoc7CvD,EAAUsO,UDlcRlI,cAAe,SAACtD,EAAQC,GACpB,GAAAoM,GAAAJ,EAAAC,CAUA,OAVAA,GAAalM,EAAO0D,KAAKwE,OAAOkE,aAAa,IAC7CH,EAAahM,EAAOyD,KAAKwE,OAAOkE,aAAa,IAEzCC,EADgB,IAAjBrM,EAAO/D,QAAiC,IAAjBgE,EAAOhE,OACvBD,KAACsO,SACc,IAAjBtK,EAAO/D,OACLD,KAACqO,UAAU4B,GACI,IAAjBhM,EAAOhE,OACLD,KAACoO,UAAU8B,GAEXlQ,KAACiO,KAAKiC,GAAYD,GAC5B,MAAAI,EAAOA,GAAOlM,MAAO,WCscrB,MDtcyB,OAAOC,OAAQ,WCycxC,MDzc2C,MC8c1ClD,KD3cTD,EAAEqP,gBAAkBlP,oBAAAA,EAAqBC,YAAAA,EAAaU,UAAAA,EAAWR,SAAAA,EAAUE,QAAAA,EACvEE,YAAAA,EAAaC,aAAAA,EAAcM,OAAAA,EAAQhB,UAAAA,GAMvCW,EAAqB,SAAC0O,EAAWtN,GAE7B,GAAAqK,GAAA0C,EAAAxC,EAAAvJ,EAAAkK,EAAAjL,EAAAsN,EAAA1Q,EAAA8O,EAAAmB,EAAAtM,EAAAiK,EAAA1J,EAAAkK,EAAAuC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/L,EAAAtC,CAAAO,IACI+N,OAAOC,cAAe,MACtBjH,eAAeS,OAAQ,WAE3BzH,EAAOhC,EAAEuC,QAAO,KAAUN,EAAUD,GAEpCuK,EAAW+C,EAAU/C,SACrBE,EAAW6C,EAAU7C,SACrBQ,EAAUqC,EAAUrD,aACpBiB,EAAUoC,EAAUpD,aAEjBlK,EAAKgO,MAAMC,gBACVV,EAAkB,SAACrM,EAAOgN,EAAWC,GACjC,GAAA7M,GAAA8M,EAAAvR,CAAAuR,KACA,KAAAvR,IAAA0N,GC0dChN,EAAQmE,KAAK6I,EAAU1N,KAC5ByE,EAAOiJ,EAAS1N,GD3dkD,MAAAsR,EAAAtR,KAA9DuR,EAAQ9M,GAAQ6M,EAAUtR,IAC1B,KAAAA,IAAA4N,GCgeClN,EAAQmE,KAAK+I,EAAU5N,KAC5ByE,EAAOmJ,EAAS5N,GDjekD,MAAAqR,EAAArR,KAA9DuR,EAAQ9M,GAAQ4M,EAAUrR,IAC1B,OAAO,UAACwR,GCseZ,MDtekBrO,GAAKgO,MAAMC,cAAcI,EAAGnN,EAAOkN,EAASd,MAGlE9M,EAAS8N,SAASC,cAAc,SAChC/N,EAAOgO,UAAY,WAGnBhB,EAAW,SAACiB,EAAK5R,EAAG8O,GAChB,GAAA7O,GAAA4R,EAAA1L,EAAA2L,EAAAlN,EAAAU,EAAAyM,EAAAlP,CAAA,IAAQ,IAAL7C,EAAH,CAEI,IADA8R,GAAS,EACAjP,EAAA5C,EAAA,EAAA2E,EAAAkK,EAAA,GAAAlK,EAAA3E,GAAA2E,EAAA3E,GAAA2E,EAAA/B,EAAA,GAAA+B,IAAA3E,IAAAA,EACF2R,EAAI5R,EAAE,GAAG6C,KAAM+O,EAAI5R,GAAG6C,KACrBiP,GAAS,EACjB,IAAGA,EACD,SAEN,IADAD,EAAM,EACA7R,EAAE6R,EAAMD,EAAIzR,QAAlB,CAEI,IADA4R,GAAO,EACElP,EAAAsD,EAAA,EAAAb,EAAAwJ,EAAA,GAAAxJ,EAAAa,GAAAb,EAAAa,GAAAb,EAAAzC,EAAA,GAAAyC,IAAAa,IAAAA,EACUyL,EAAI5R,GAAG6C,KAAM+O,EAAI5R,EAAE6R,GAAKhP,KAAvCkP,GAAO,EACX,IAASA,EAAT,KACAF,KACJ,MAAOA,IAGXd,EAAQU,SAASC,cAAc,QAC/B,KAAA5C,IAAApB,GCgfA,GAAKhN,EAAQmE,KAAK6I,EAAUoB,GAA5B,CACAoB,EAAIxC,EAASoB,GDhfTmC,EAAKQ,SAASC,cAAc,MACV,IAAfM,SAASlD,IAA+B,IAAnBlB,EAASzN,SAC7B2Q,EAAKW,SAASC,cAAc,MAC5BZ,EAAGmB,aAAa,UAAWrE,EAASzN,QACpC2Q,EAAGmB,aAAa,UAAWvE,EAASvN,QACpC8Q,EAAGiB,YAAYpB,IACnBA,EAAKW,SAASC,cAAc,MAC5BZ,EAAGa,UAAY,eACfb,EAAGqB,YAAcjC,EACjBe,EAAGiB,YAAYpB,EACf,KAAA9Q,IAAAqO,GCmfG3N,EAAQmE,KAAKwJ,EAASrO,KAC3BmE,EAASkK,EAAQrO,GDnfX6C,EAAI8N,EAAStC,EAAS2D,SAAShS,GAAIgS,SAASlD,IACzCjM,SACCiO,EAAKW,SAASC,cAAc,MAC5BZ,EAAGa,UAAY,cACfb,EAAGqB,YAAchO,EAAO2K,GACxBgC,EAAGmB,aAAa,UAAWpP,GACxBmP,SAASlD,KAAMpB,EAASvN,OAAO,GAAyB,IAAnByN,EAASzN,QAC7C2Q,EAAGmB,aAAa,UAAW,GAC/BhB,EAAGiB,YAAYpB,IACL,KAAfkB,SAASlD,KACRgC,EAAKW,SAASC,cAAc,MAC5BZ,EAAGa,UAAY,gBACfb,EAAGsB,UAAYjP,EAAKgH,cAAcS,OAClCkG,EAAGmB,aAAa,UAAWvE,EAASvN,QAA+B,IAAlByN,EAASzN,OAAgB,EAAO,IACjF8Q,EAAGiB,YAAYpB,IACnBC,EAAMmB,YAAYjB,GAGtB,GAAqB,IAAlBrD,EAASzN,OAAZ,CACI8Q,EAAKQ,SAASC,cAAc,KAC5B,KAAA1R,IAAA4N,GCwfGlN,EAAQmE,KAAK+I,EAAU5N,KAC5BiQ,EAAIrC,EAAS5N,GDxfP8Q,EAAKW,SAASC,cAAc,MAC5BZ,EAAGa,UAAY,eACfb,EAAGqB,YAAclC,EACjBgB,EAAGiB,YAAYpB,GACnBA,GAAKW,SAASC,cAAc,MACP,IAAlBhE,EAASvN,SACR2Q,EAAGa,UAAY,gBACfb,EAAGsB,UAAYjP,EAAKgH,cAAcS,QACtCqG,EAAGiB,YAAYpB,GACfC,EAAMmB,YAAYjB,GACtBtN,EAAOuO,YAAYnB,GAGnBH,EAAQa,SAASC,cAAc,QAC/B,KAAA1R,IAAAoO,GC2fA,GAAK1N,EAAQmE,KAAKuJ,EAASpO,GAA3B,CACAkE,EAASkK,EAAQpO,GD3fbiR,EAAKQ,SAASC,cAAc,KAC5B,KAAA5C,IAAA5K,GC6fGxD,EAAQmE,KAAKX,EAAQ4K,KAC1BoC,EAAMhN,EAAO4K,GD7fPjM,EAAI8N,EAASvC,EAAS4D,SAAShS,GAAIgS,SAASlD,IACzCjM,SACCiO,EAAKW,SAASC,cAAc,MAC5BZ,EAAGa,UAAY,cACfb,EAAGqB,YAAcjB,EACjBJ,EAAGmB,aAAa,UAAWpP,GACxBmP,SAASlD,KAAMlB,EAASzN,OAAO,GAAwB,IAAlBuN,EAASvN,QAC7C2Q,EAAGmB,aAAa,UAAU,GAC9BhB,EAAGiB,YAAYpB,IACvB,KAAAhC,IAAAT,GCkgBG3N,EAAQmE,KAAKwJ,EAASS,KAC3B3K,EAASkK,EAAQS,GDlgBXtB,EAAaiD,EAAUjJ,cAActD,EAAQC,GAC7CgB,EAAMqI,EAAWnJ,QACjBwM,EAAKY,SAASC,cAAc,MAC5Bb,EAAGc,UAAY,aAAa3R,EAAE,OAAM8O,EACpC+B,EAAGsB,YAAc3E,EAAWlJ,OAAOa,GACnC0L,EAAGoB,aAAa,aAAc9M,GAC3B,MAAAuL,IACCG,EAAGwB,QAAU3B,EAAgBvL,EAAKjB,EAAQC,IAC9C8M,EAAGiB,YAAYrB,GAEnBG,GAAkBP,EAAUjJ,cAActD,MAC1CiB,EAAM6L,EAAgB3M,QACtBwM,EAAKY,SAASC,cAAc,MAC5Bb,EAAGc,UAAY,oBACfd,EAAGsB,YAAcnB,EAAgB1M,OAAOa,GACxC0L,EAAGoB,aAAa,aAAc9M,GAC3B,MAAAuL,IACCG,EAAGwB,QAAU3B,EAAgBvL,EAAKjB,OACtC2M,EAAGoB,aAAa,WAAY,MAAMjS,GAClCiR,EAAGiB,YAAYrB,GACfD,EAAMsB,YAAYjB,GAGtBA,EAAKQ,SAASC,cAAc,MAC5BZ,EAAKW,SAASC,cAAc,MAC5BZ,EAAGa,UAAY,gBACfb,EAAGsB,UAAYjP,EAAKgH,cAAcS,OAClCkG,EAAGmB,aAAa,UAAWrE,EAASzN,QAAgC,IAAnBuN,EAASvN,OAAiB,EAAO,IAClF8Q,EAAGiB,YAAYpB,EACf,KAAAhC,IAAAT,GCqgBK3N,EAAQmE,KAAKwJ,EAASS,KAC3B3K,EAASkK,EAAQS,GDrgBbkC,EAAkBP,EAAUjJ,iBAAkBrD,GAC9CgB,EAAM6L,EAAgB3M,QACtBwM,EAAKY,SAASC,cAAc,MAC5Bb,EAAGc,UAAY,oBACfd,EAAGsB,YAAcnB,EAAgB1M,OAAOa,GACxC0L,EAAGoB,aAAa,aAAc9M,GAC3B,MAAAuL,IACCG,EAAGwB,QAAU3B,EAAgBvL,KAAShB,IAC1C0M,EAAGoB,aAAa,WAAY,MAAMnD,GAClCmC,EAAGiB,YAAYrB,GAiBnB,OAhBAG,GAAkBP,EAAUjJ,qBAC5BrC,EAAM6L,EAAgB3M,QACtBwM,EAAKY,SAASC,cAAc,MAC5Bb,EAAGc,UAAY,gBACfd,EAAGsB,YAAcnB,EAAgB1M,OAAOa,GACxC0L,EAAGoB,aAAa,aAAc9M,GAC3B,MAAAuL,IACCG,EAAGwB,QAAU3B,EAAgBvL,UACjC8L,EAAGiB,YAAYrB,GACfD,EAAMsB,YAAYjB,GAClBtN,EAAOuO,YAAYtB,GAGnBjN,EAAOsO,aAAa,eAAgB7D,EAAQjO,QAC5CwD,EAAOsO,aAAa,eAAgB5D,EAAQlO,QAErCwD,GAMXxC,EAAEb,GAAGgS,MAAQ,SAAC1F,EAAO2F,EAAWC,GAC5B,GAAApP,GAAAoO,EAAAiB,EAAAtI,EAAAhH,EAAAsN,EAAA9M,EAAAd,CCugBY,OAAV2P,IDxgB0BA,EAAO,MACd,MAAA7Q,EAAA6Q,KAArBA,EAAS,MACTpP,GACIuK,QAAWE,QAAUlI,QACrBoI,SAAU,aAAcC,SAAU,aAClC0E,UAAWtR,EACX8M,OAAQ,WCghBV,ODhhBa,GACXV,WAAYlM,EAAoByC,UAChC0J,eAAgB,QAChBpI,WACA4I,qBACA0E,SAAU5Q,GAEdoI,EAAgBhJ,EAAEuC,QAAO,KAAU/B,EAAQuI,GAAGC,cAAexI,EAAQ6Q,GAAQrI,eAC7EsI,GACIG,iBAAkBzI,cAAAA,GAClBA,cAAeA,GAEnBhH,EAAOhC,EAAEuC,QAAO,KAAU+O,EAAgBtR,EAAEuC,UAAWN,EAAUmP,IAEjE5O,EAAS,IACT,KACI8M,EAAY,GAAItN,GAAKuP,UAAU9F,EAAOzJ,EACtC,KACIQ,EAASR,EAAKwP,SAASlC,EAAWtN,EAAKyP,iBAD3C,MAAAC,GAEMrB,EAAAqB,EACwB,mBAAAC,UAAA,OAAAA,SAA1BA,QAAQD,MAAMrB,EAAEuB,OAChBpP,EAASxC,EAAE,UAAU6R,KAAK7P,EAAKgH,cAAcC,cANrD,MAAAyI,GAOMrB,EAAAqB,EACwB,mBAAAC,UAAA,OAAAA,SAA1BA,QAAQD,MAAMrB,EAAEuB,OAChBpP,EAASxC,EAAE,UAAU6R,KAAK7P,EAAKgH,cAAcE,cAGtB,IAD3BxH,EAAI3C,KAAK,GACwB2C,EAAEoQ,iBAAnCpQ,EAAEqQ,YAAYrQ,EAAEsQ,UAChB,OAAOjT,MAACkT,OAAOzP,IAOnBxC,EAAEb,GAAG+S,QAAU,SAACzG,EAAO2F,EAAWe,EAAmBd,GACjD,GAAA3M,GAAA0N,EAAAC,EAAAhG,EAAA/I,EAAAgP,EAAAC,EAAAC,EAAAvQ,EAAAoO,EAAAoC,EAAAC,EAAA7T,EAAA8T,EAAA7T,EAAA+O,EAAAqB,EAAA0D,EAAAtB,EAAAtI,EAAA6J,EAAA7N,EAAA8N,EAAA9Q,EAAA+Q,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1P,EAAAU,EAAAC,EAAAgP,EAAAC,EAAAC,EAAAC,EAAAC,EAAAhC,EAAAiC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAA1S,EC2hBe,OAAbyQ,ID5hB4BA,GAAY,GC+hB9B,MAAVd,ID/hB+CA,EAAO,MACnC,MAAA7Q,EAAA6Q,KAArBA,EAAS,MACTpP,GACI6K,qBACA1M,YAAaI,EAAQ6Q,GAAQjR,YAC7BU,UAAWN,EAAQ6Q,GAAQvQ,UAC3BuT,oBACAC,UAAW,IACX9H,QAAUE,QAAUlI,QACpBoI,SAAU,aAAcC,SAAU,aAClC0E,UAAWtR,EACXsU,cACAC,cACAC,oBAAqB,GACrBC,qBAAqB,EACrBC,UAAW,KACX5H,OAAQ,WCuiBV,ODviBa,GACX7I,YAEJ8E,EAAgBhJ,EAAEuC,QAAO,KAAU/B,EAAQuI,GAAGC,cAAexI,EAAQ6Q,GAAQrI,eAC7EsI,GACIG,iBAAkBzI,cAAAA,GAClBA,cAAeA,GAEnByJ,EAAe1T,KAAC+D,KAAK,kBAEjBd,EADG,MAAAyQ,GAAiBN,EACbnS,EAAEuC,QAAO,KAAU+O,EAAgBtR,EAAEuC,UAAWN,EAAUmP,IAE1DqB,CAEX,KA8CI,GA3CAF,KACAM,KACAM,EAAmB,EACnBlT,EAAUsN,cAAc9B,EAAOzJ,EAAK8K,kBAAmB,SAACtJ,GACpD,GAAAF,GAAAsR,EAAAnR,EAAAP,CAAA,IAAclB,EAAK+K,OAAOvJ,GAA1B,CACAqP,EAAkB5P,KAAKO,EACvB,KAAAF,IAAAE,GC4iBCjE,EAAQmE,KAAKF,EAAQF,ID3iBX,MAAAiP,EAAAjP,KACHiP,EAAWjP,MACR6P,EAAmB,IAClBZ,EAAWjP,GAAM,QAAU6P,GACvC,KAAA7P,IAAAiP,GACIrP,EAAA,OAAAO,EAAAD,EAAAF,IAAAG,EAAuB,OCgjBS,OAAnCmR,EAAOrC,EAAWjP,IAAOJ,KAC5B0R,EDhjBuB1R,GAAU,GAC3BqP,EAAWjP,GAAMJ,ICmjB3B,ODljBMiQ,QAGJc,GAAUjU,EAAE,WAAW6U,QAAS,UAASvR,KAAK,cAAe,GAgB7D4Q,GAASlU,EAAE,QAAQ8U,SAAS,8BAC5BlB,EAAA,WCqiBF,GAAI9F,EDriBiBA,KCuiBrB,KDviBqBpJ,IAAA6N,GAA2B5T,EAAA+E,KAAS1B,EAAKqS,iBAAd3P,GAAA,GCyiB5CoJ,EAAQ7K,KDziBSyB,EC4iBrB,OAAOoJ,MD1iBLsG,IAAkC,EAE9BD,GAD2B,SAA5BnS,EAAKyS,oBAC4B,IAEA5D,SAAS7O,EAAKyS,sBAE3ChS,MAAM0R,IAAb,CAEI,IADA7B,EAAa,EACbxT,EAAA,EAAA+O,EAAA+F,EAAA5U,OAAAF,EAAA+O,EAAA/O,IC6iBJ4F,EAAIkP,EAAgB9U,GD7iBhBwT,GAAc5N,EAAE1F,MAChBoV,IAAkC9B,EAAa6B,GAEhDnS,EAAKyS,uBAAuB,GAAQL,GACnCF,GAAOY,SAAS,eAEhBZ,GAAOY,SAAS,gBCijBxBpC,ED9iBW,SAACpP,GACA,GAAAyR,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApG,EAAAlK,EAAAuQ,EAAA9R,EAAAQ,EAAAuR,EAAAtH,EAAAhL,EAAAuS,EAAAC,EAAAC,CAQA,IARAA,EAAA,WCgjBR,GAAI7H,EDhjBcA,KCkjBlB,KDljBkBI,IAAAqE,GAAAjP,GCmjBhBwK,EAAQ7K,KDnjBQiL,ECqjBlB,OAAOJ,MDpjBCwH,GAAkB,EAClBI,EAAY1V,EAAE,SAAS8U,SAAS,gBAAgBc,OAEhDF,EAAUzD,OAAOjS,EAAE,QAAQiS,OACvBjS,EAAE,UAAUqO,KAAK/K,GACjBtD,EAAE,UAAU8U,SAAS,SAASzG,KAAK,IAAIsH,EAAO3W,OAAO,OAEtD2W,EAAO3W,OAASgD,EAAKsS,UACpBoB,EAAUzD,OAAOjS,EAAE,OAAO6R,KAAK7P,EAAKgH,cAAcM,cA6ClD,KA3CGqM,EAAO3W,OAAS,IACfkW,EAAWlV,EAAE,OAAO6V,SAASH,GAC7BzR,EAAS1D,EAAQyB,EAAKkC,QAASZ,GAC/BiS,EAAcvT,EAAKgH,cAAcO,cACjCvJ,EAAE,WAAY+F,KAAM,SAAS8P,SAASX,GACjC5R,MAAMiS,YAAaA,EAAaV,QAAO,cACvC3V,KAAK,QAAS,WACX,GAAA4W,GAAAC,EAAAhJ,CCykBpB,ODzkBoBA,GAAS/M,EAAEjB,MAAMiF,MAAMuH,cAAcyK,OACrCD,EAAa,SAAC3T,EAAQ6T,GCujBxC,MDvjBqD,UAAC/H,GAChC,GAAAgI,GAAAzS,CACA,OADAyS,GAAcnJ,EAAOoJ,UAAU/T,EAAOpD,QAAQgX,OACT,IAAtBE,EAAYlX,SAC3ByE,EAAOY,KAAKuB,KAAK3B,EAAOiK,EAAE3C,cAAe2K,IAAlCvX,EAAA+E,KAAmDuS,EAAnDxS,IAAA,KACXqS,EACY/I,EAAOqJ,WAAW,MAAWL,EAAW,MAAO,EAAE,IACjDhJ,EAAOqJ,WAAW,MAAWL,EAAW,SAAU,IAClDhJ,EAAOqJ,WAAW,KAAWL,EAAW,KAAO,IAC/ChJ,EAAOqJ,WAAW,KAAWL,EAAW,UACxChJ,EAAOqJ,WAAW,KAAW,SAAClI,GAC9B,MAAoD,KAArCnB,EAAOoJ,UAAU,GAAGH,OAAOhX,QAC1CkP,EAAE3C,cAAcL,MAAM6B,EAAOoJ,UAAU,KAC1C,SAACjI,GC0jB5B,MD1jBkCA,GAAE3C,cAAc5M,QAAQoO,SAExC2I,EAAUW,KAAK,yCAAyCjI,KAAK,WACzD,MAAG0H,GAAO9V,EAAEjB,MAAMsP,QACdrO,EAAEjB,MAAMuX,SAASA,SAASC,OAE1BvW,EAAEjB,MAAMuX,SAASA,SAASV,WAC1CV,EAASjD,OAAOjS,EAAE,SAClBA,EAAE,YAAa+F,KAAK,WAAW8P,SAASX,GACnCrD,KAAK7P,EAAKgH,cAAcI,WACxBlK,KAAK,QAAS,WAGX,MAFAwW,GAAUW,KAAK,+BACVG,KAAK,WAAW,GAAMC,YAAY,YAChC,IACfzW,EAAE,YAAa+F,KAAK,WAAW8P,SAASX,GACnCrD,KAAK7P,EAAKgH,cAAcK,YACxBnK,KAAK,QAAS,WAGX,MAFAwW,GAAUW,KAAK,yBACVG,KAAK,WAAW,GAAOC,YAAY,YACjC,KAEnBzB,EAAiBhV,EAAE,SAAS8U,SAAS,qBAAqBe,SAASH,GAEnEjS,EAAAkS,EAAAlR,KAAAlE,EAAAyB,EAAAkC,QAAAZ,IAAA0B,EAAA,EAAAkK,EAAAzL,EAAAzE,OAAAgG,EAAAkK,EAAAlK,IC8jBV9B,EAAQO,EAAIuB,GD7jBGyQ,EAAalD,EAAWjP,GAAMJ,GAC9BiS,EAAanV,EAAE,WACfoV,GAAqB,EAClBpT,EAAKwS,WAAWlR,GAChB8R,EAAsBzW,EAAA+E,KAAa1B,EAAKwS,WAAWlR,GAA7BJ,GAAA,EACjBlB,EAAKuS,WAAWjR,KACrB8R,EAAsBzW,EAAA+E,KAAS1B,EAAKuS,WAAWjR,GAAzBJ,IAAA,GACzBoS,IAAAA,EAAoBF,GACpBpV,EAAE,WACEsD,KAAK,OAAQ,YAAYwR,SAAS,aAClCxR,KAAK,WAAY8R,GAAoBtS,KAAK,UAAWQ,EAAKJ,IAC1D2S,SAASV,GACTjW,KAAK,SAAU,WC4jBhC,MD5jBmCc,GAAEjB,MAAM0X,YAAY,aAC1CtB,EAAWlD,OAAOjS,EAAE,UAAU8U,SAAS,SAASzG,KAAKnL,IACrDiS,EAAWlD,OAAOjS,EAAE,UAAU8U,SAAS,SAASzG,KAAK,IAAIoH,EAAW,MACpET,EAAe/C,OAAOjS,EAAE,OAAOiS,OAAOkD,GCwmBzD,ODtmBUF,GAAiB,WCskBzB,MDrkBeS,GAAUW,KAAK,qBAAqBrX,OAChC0W,EAAUW,KAAK,6BAA6BrX,OAC3C+V,EAASD,SAAS,wBAElBC,EAAS2B,YAAY,wBAEzBhB,EAAUW,KAAK,cAAcrS,IAAI,IACjC0R,EAAUW,KAAK,wBAAwBE,OACvCb,EAAUE,QAElBP,EAAerV,EAAE,OAAO6V,SAASH,GAE9BC,EAAO3W,QAAUgD,EAAKsS,WACrBtU,EAAE,YAAa+F,KAAM,WAAWsI,KAAKrM,EAAKgH,cAAc3J,OACnDwW,SAASR,GAAcnW,KAAK,QAAS,WCikBpD,MDhkBqBwW,GAAUW,KAAK,YAAYK,YAAY,WAAW1X,QACjDoU,IACJ6B,MAEZjV,EAAE,YAAa+F,KAAM,WAAWsI,KAAKrM,EAAKgH,cAAcQ,QACnDqM,SAASR,GAAcnW,KAAK,QAAS,WCmkBlD,MDlkBgBwW,GAAUW,KAAK,oBACVK,YAAY,WAAWF,KAAK,WAAW,GAC5Cd,EAAUW,KAAK,0BACVK,YAAY,WAAWF,KAAK,WAAW,GAC5CvB,MAERO,EAAexV,EAAE,UAAU8U,SAAS,eAC/BjD,KAAK,aAAa3S,KAAK,QAAS,SAACmR,GAC9B,GAAAsG,GAAAxS,EAAAyS,CC+jBhB,OD/jBgBzS,GAAcnE,EAAEqQ,EAAEwG,eAAeC,WAAhCH,EAAAxS,EAAAwS,KAAMC,EAAAzS,EAAAyS,IACPlB,EAAUqB,KAAIJ,KAAMA,EAAK,GAAIC,IAAKA,EAAI,KAAIL,SAElDxB,EAAW/U,EAAE,QAAQ8U,SAAS,QAAQjW,GACjCoT,OAAOjS,EAAE,UAAU8U,SAAS,WAAWzG,KAAK/K,GAAMR,KAAK,WAAYQ,GAAM2O,OAAOuD,IAExCF,GAA7CP,EAASD,SAAS,wBAClBZ,GAAOjC,OAAO8C,GAAU9C,OAAOyD,GA/GvC,KAAA7W,IAAA+U,GCmrBGrU,EAAQmE,KAAKkQ,EAAiB/U,KACnCyE,EAAOsQ,EAAgB/U,GACvB6T,EDprBUpP,GAgHRyQ,IAAM/T,EAAE,QAAQ6V,SAAS5B,IAIzB5H,EAAarM,EAAE,YAAY8U,SAAS,iBAC/B5V,KAAK,SAAU,WCmkBtB,MDnkByBkU,OACvB3P,EAAAzB,EAAA5B,WAAA,KAAAsB,KAAA+B,GCskBGlE,EAAQmE,KAAKD,EAAK/B,KDrkBjB2K,EAAW4F,OAAOjS,EAAE,YAAYgE,IAAItC,IAAGmQ,KAAKnQ,IAkbhD,KAhbAqR,GACIiE,YAAeC,UAAW,SAAUC,UAAW,SAAUC,KAAM,gBAC/DC,cAAeH,UAAW,SAAUC,UAAW,SAAUC,KAAM,gBAC/DE,cAAeJ,UAAW,SAAUC,UAAW,SAAUC,KAAM,eAEnEzD,EAAgB1T,EAAE,OAAOsX,KAAM,WAAUxC,SAAS,eAC7ChS,KAAK,QAASd,EAAK4K,UAAUiF,KAAKkB,EAAS/Q,EAAK4K,UAAUqK,WAC1D/X,KAAK,QAAS,WCqlBrB,MDplBUc,GAAEjB,MAAM+D,KAAK,QAASiQ,EAAS/S,EAAEjB,MAAM+D,KAAK,UAAUqU,MACtDnX,EAAEjB,MAAM8S,KAAKkB,EAAS/S,EAAEjB,MAAM+D,KAAK,UAAUmU,WAC7C7D,MAERZ,EAAgBxS,EAAE,OAAOsX,KAAM,WAAUxC,SAAS,eAC7ChS,KAAK,QAASd,EAAK6K,UAAUgF,KAAKkB,EAAS/Q,EAAK6K,UAAUqK,WAC1DhY,KAAK,QAAS,WCqlBrB,MDplBUc,GAAEjB,MAAM+D,KAAK,QAASiQ,EAAS/S,EAAEjB,MAAM+D,KAAK,UAAUqU,MACtDnX,EAAEjB,MAAM8S,KAAKkB,EAAS/S,EAAEjB,MAAM+D,KAAK,UAAUoU,WAC7C9D,MAERpT,EAAE,QAAQ8U,SAAS,WAChBe,SAAS9B,IACT9B,OAAO5F,GACP4F,OAAOyB,GACPzB,OAAOO,GACPP,OAAOjS,EAAE,SAGZA,EAAE,QAAQ8U,SAAS,yCAAyCe,SAAS9B,IAErEC,GAAMhU,EAAE,QAAQ6V,SAAS5B,IAGzBD,GAAI/B,OAAOjS,EAAE,QAAQ8U,SAAS,4BAA4BxR,KAAK,SAAU,QAGzE0P,EAAahT,EAAE,QACVsD,KAAK,SAAU,OAEfuS,SAAS7B,IA0CdH,EAAU,EACVzB,EAAY,KACZa,KACAa,MACAL,KACAjC,KACA0B,KAEAb,EAAc,SAAA3H,GC0hBhB,MD1hBgB,YAMV,GAAA6M,GAAApT,EAAAC,EAAAoT,CACA,IADAA,EAAQjN,KAAKkN,MACC,IAAX5D,EAAH,CACIzB,EAAYpS,EAAE,QACduX,EAA4BvX,EAAE,QAAQ6V,SAAS7C,GAC/CC,EAAiBuE,GAASxX,EAAE,QAC3BsD,KAAK,SAAU,OACfuS,SAAS0B,GACVzD,GAAmB0D,GAASpF,EAAUyD,SAAS5C,EAAiBuE,IAEhE/D,EAAgB+D,GAASxX,EAAE,QAC1BsD,KAAK,SAAU,OACfuS,SAAS/B,GAAmB0D,IAE7BhG,EAASgG,GAASxX,EAAE,YACf8U,SAAS,cAAgB0C,GACzB3B,SAASpC,EAAgB+D,IACzBtY,KAAK,SAAU,WC+gBxB,MD9gBYyU,GAAc,cAAgB6D,GAC9BhE,EAAYgE,KACpBrT,EAAAnC,EAAAlB,SAAA,KAAAY,KAAAyC,GCghBC5E,EAAQmE,KAAKS,EAAMzC,KD/gBhB1B,EAAE,YAAYgE,IAAItC,IAAGmQ,KAAKnQ,IAAGmU,SAASrE,EAASgG,GCmhBzD,ODjhBMtE,GAAiBsE,GAASxX,EAAE,QACvBsD,KAAK,SAAU,OACfwR,SAAS,kBAAoB0C,GAC7B3B,SAAS/B,GAAmB0D,IAEjC3D,GAAoB,EAEnB,GAAc,IAAXA,EAAH,CACDX,EAAiBsE,GAASxX,EAAE,QAC3BsD,KAAK,SAAU,OACfuS,SAASzD,GACV0B,GAAmB0D,GAASxX,EAAE,QAAQ6V,SAAS3C,EAAiBsE,IAChE/D,EAAgB+D,GAASxX,EAAE,QAC1BsD,KAAK,SAAU,OACfuS,SAAS/B,GAAmB0D,IAC7BhG,EAASgG,GAASxX,EAAE,YACf8U,SAAS,cAAgB0C,GACzB3B,SAASpC,EAAgB+D,IACzBtY,KAAK,SAAU,WCsgBxB,MDrgBYyU,GAAc,cAAgB6D,GAC9BhE,EAAYgE,KACpBpT,EAAApC,EAAAlB,SAAA,KAAAY,KAAA0C,GCugBC7E,EAAQmE,KAAKU,EAAM1C,KDtgBhB1B,EAAE,YAAYgE,IAAItC,IAAGmQ,KAAKnQ,IAAGmU,SAASrE,EAASgG,GC0gBzD,ODvgBMtE,GAAiBsE,GAASxX,EAAE,QACvBsD,KAAK,SAAU,OACfwR,SAAS,mBACTe,SAAS/B,GAAmB0D,IACjC3D,EAAU,KAzDJ9U,MA4DdiB,EAAE,aAAa0X,MAAMrF,GA4CrBiB,EAAiB,SAAA5I,GC0dnB,MD1dmB,YACb,GAAA6J,GAAAC,EAAA7B,EAAAzD,EAAAlK,EAAA2S,EAAAC,EAAA9E,EAAA+E,EAAAC,EAAA3T,EAAAC,EAAA2T,EAAAC,EAAAxT,CAoBA,IApBAmN,QAAQsG,IAAI,cACZF,GACIjL,kBAAmB9K,EAAK8K,kBACxB9D,cAAehH,EAAKgH,cACpByI,gBAAiBzP,EAAKyP,gBACtBvN,QAASlC,EAAKkC,QACdsI,QAAUE,QACV6E,UAAWvP,EAAKuP,WAEpBqG,EAAA,OAAAzT,EAAAnC,EAAA5B,YAAAiM,EAAArI,aAAAL,WAAAQ,EAA0E,EAC1EK,KACAkG,EAAC2L,KAAK,4BAA4BjI,KAAK,WC6dzC,MD7d4C2J,GAAQrL,KAAKzJ,KAAKjD,EAAEjB,MAAM+D,KAAK,eACzE4H,EAAC2L,KAAK,4BAA4BjI,KAAK,WC+dzC,MD/d4C2J,GAAQvL,KAAKvJ,KAAKjD,EAAEjB,MAAM+D,KAAK,eACzE4H,EAAC2L,KAAK,mCAAmCjI,KAAK,WAC1C,MAAyB,KAAtBwJ,EACC5X,EAAEjB,MAAMmZ,UAERN,IAC4C,KAAjB5X,EAAEjB,MAAMiF,MAAnCQ,EAAKvB,KAAKjD,EAAEjB,MAAMiF,OAAlB,UAEiB,IAAtB4T,EAEC,IADAE,EAAUpN,EAAC2L,KAAK,YACP3U,GAAAsD,EAAA,EAAAZ,EAAAwT,EAAA,GAAAxT,EAAAY,EAAAZ,EAAAY,EAAAZ,EAAA1C,GAAA,GAAA0C,IAAAY,IAAAA,EAAT,CAKI,IAJA2S,EAAc3X,EAAE,YACX8U,SAAS,mBACT7C,OAAOjS,EAAE,aACTd,KAAK,SAAU,WCie1B,MDje6BkU,OACvBN,EAAA,EAAA5D,EAAA0E,EAAA5U,OAAA8T,EAAA5D,EAAA4D,ICmeNxP,EAAOsQ,EAAgBd,GDleb6E,EAAY1F,OAAOjS,EAAE,YAAYgE,IAAIV,GAAM+K,KAAK/K,GACpDwU,GAAQ7F,OAAO0F,GAmEvB,GAjEGhF,IACCnO,EAAOxC,EAAKwC,KACZ3F,EAAI,EACJ6L,EAAC2L,KAAK,mCAAmCjI,KAAK,WCuelD,MDteQpO,GAAEjB,MAAMiF,IAAIQ,EAAK3F,IACjBA,MACJ8T,GAAgB,GAEpBoF,EAAQzL,eAAiBD,EAAWrI,MACpC+T,EAAQvT,KAAOA,EACfuT,EAAQ1L,WAAarK,EAAK5B,YAAYiM,EAAWrI,OAAOQ,GACxDuT,EAAQvG,SAAWxP,EAAKlB,UAAU0Q,EAASgG,OAAOxT,OAClD+T,EAAQnL,SAAW8G,EAAc5Q,KAAK,SACtCiV,EAAQlL,SAAW2F,EAAc1P,KAAK,SAEtCyR,KACA7J,EAAC2L,KAAK,mBAAmB8B,IAAI,YAAY/J,KAAK,WAC1C,GAAArB,EACA,OADAA,GAAS/M,EAAEjB,MAAM+D,KAAK,UACnB,MAAAyR,EAAAxH,EAAA,IACCwH,EAAWxH,EAAO,IAAI9J,KAAM8J,EAAO,IAEnCwH,EAAWxH,EAAO,KAAQA,EAAO,MAEzCyH,KACA9J,EAAC2L,KAAK,2BAA2BjI,KAAK,WAClC,GAAArB,EACA,IADAA,EAAS/M,EAAEjB,MAAM+D,KAAK,UACnB,MAAAyR,EAAAxH,EAAA,IACC,MAAG,OAAAyH,EAAAzH,EAAA,IACCyH,EAAWzH,EAAO,IAAI9J,KAAM8J,EAAO,IAEnCyH,EAAWzH,EAAO,KAAQA,EAAO,MAE7CgL,EAAQhL,OAAS,SAACvJ,GACd,GAAA4U,GAAAxK,EAAAlC,EAAAC,CAAA,KAAoB3J,EAAK+K,OAAOvJ,GAAhC,OAAO,CACP,KAAAoK,IAAA2G,GACI,GC6eR6D,EAAgB7D,EAAW3G,GD7enBlC,EAAgB,IAAG,OAAAC,EAAAnI,EAAAoK,IAAAjC,EAAa,QAAhBhN,EAAA+E,KAA2B0U,EAA3B1M,IAAA,EAAhB,OAAO,CACX,QAAO,GAEXwH,EAAiB/B,MAAM0B,EAAkBkF,GAGzCF,EAAiB7X,EAAEuC,UAAWP,GAC1BwK,KAAMuL,EAAQvL,KACdE,KAAMqL,EAAQrL,KACdG,SAAUkL,EAAQlL,SAClBD,SAAUmL,EAAQnL,SAClBpI,KAAMA,EACN+P,WAAYA,EACZC,WAAYA,EACZ6D,eAAgB7D,EAChBlI,eAAgBD,EAAWrI,MAC3BsU,aAAc9G,EAASgG,OAAOxT,QAElC0G,EAAC5H,KAAK,iBAAkB+U,GAGrB7V,EAAK0S,sBACJsD,EAAuBtN,EAAC2L,KAAK,iCAC7BrW,EAAEgY,GAAsBO,SAAS,MAC5B9T,KAAK,SAACC,EAAGC,GC6elB,MD7ewBjE,GAAYV,EAAE0E,GAAG2J,OAAQrO,EAAE2E,GAAG0J,UAC7CwH,SAASmC,IAElB9E,EAAiB6D,IAAI,UAAW,GAGE,MAAA/U,EAAA2S,UC4epC,MD5eE3S,GAAK2S,UAAUkD,KAjGF9Y,MAmGjByU,EAAc,SAAA9I,GC+ehB,MD/egB,UAAC8M,GCkff,MDjfItE,GAAiBsE,GAAOT,IAAI,UAAW,IACvCpF,QAAQsG,IAAI,QACZ1E,EAAgBiE,KAHNzY,MAWdwU,EAAkB,SAAA7I,GC2epB,MD3eoB,UAAC8M,GACf,GAAAjD,GAAAC,EAAA7B,EAAAzD,EAAAlK,EAAA2S,EAAAC,EAAA9E,EAAA+E,EAAAC,EAAA3T,EAAAC,EAAA2T,EAAAC,EAAAxT,CAoBA,IApBAmN,QAAQsG,IAAI,cACZF,GACIjL,kBAAmB9K,EAAK8K,kBACxB9D,cAAehH,EAAKgH,cACpByI,gBAAiBzP,EAAKyP,gBACtBvN,QAASlC,EAAKkC,QACdsI,QAAUE,QACV6E,UAAWvP,EAAKuP,WAEpBqG,EAAA,OAAAzT,EAAAnC,EAAA5B,YAAAiM,EAAArI,aAAAL,WAAAQ,EAA0E,EAC1EK,KACAkG,EAAC2L,KAAK,4BAA4BjI,KAAK,WC8ezC,MD9e4C2J,GAAQrL,KAAKzJ,KAAKjD,EAAEjB,MAAM+D,KAAK,eACzE4H,EAAC2L,KAAK,4BAA4BjI,KAAK,WCgfzC,MDhf4C2J,GAAQvL,KAAKvJ,KAAKjD,EAAEjB,MAAM+D,KAAK,eACzE4H,EAAC2L,KAAK,mCAAmCjI,KAAK,WAC1C,MAAyB,KAAtBwJ,EACC5X,EAAEjB,MAAMmZ,UAERN,IAC4C,KAAjB5X,EAAEjB,MAAMiF,MAAnCQ,EAAKvB,KAAKjD,EAAEjB,MAAMiF,OAAlB,UAEiB,IAAtB4T,EAEC,IADAE,EAAUpN,EAAC2L,KAAK,YACP3U,GAAAsD,EAAA,EAAAZ,EAAAwT,EAAA,GAAAxT,EAAAY,EAAAZ,EAAAY,EAAAZ,EAAA1C,GAAA,GAAA0C,IAAAY,IAAAA,EAAT,CAKI,IAJA2S,EAAc3X,EAAE,YACX8U,SAAS,mBACT7C,OAAOjS,EAAE,aACTd,KAAK,SAAU,WCkf1B,MDlf6BkU,OACvBN,EAAA,EAAA5D,EAAA0E,EAAA5U,OAAA8T,EAAA5D,EAAA4D,ICofNxP,EAAOsQ,EAAgBd,GDnfb6E,EAAY1F,OAAOjS,EAAE,YAAYgE,IAAIV,GAAM+K,KAAK/K,GACpDwU,GAAQ7F,OAAO0F,GAoEvB,GAlEGhF,IACCnO,EAAOxC,EAAKwC,KACZ3F,EAAI,EACJ6L,EAAC2L,KAAK,mCAAmCjI,KAAK,WCwflD,MDvfQpO,GAAEjB,MAAMiF,IAAIQ,EAAK3F,IACjBA,MACJ8T,GAAgB,GAEpBoF,EAAQzL,eAAiBD,EAAWrI,MACpC+T,EAAQvT,KAAOA,EACfuT,EAAQ1L,WAAarK,EAAK5B,YAAYiM,EAAWrI,OAAOQ,GACxDuT,EAAQvG,SAAWxP,EAAKlB,UAAU0Q,EAASgG,GAAOxT,OAClD+T,EAAQnL,SAAW8G,EAAc5Q,KAAK,SACtCiV,EAAQlL,SAAW2F,EAAc1P,KAAK,SAEtCyR,KACA7J,EAAC2L,KAAK,mBAAmB8B,IAAI,YAAY/J,KAAK,WAC1C,GAAArB,EACA,OADAA,GAAS/M,EAAEjB,MAAM+D,KAAK,UACnB,MAAAyR,EAAAxH,EAAA,IACCwH,EAAWxH,EAAO,IAAI9J,KAAM8J,EAAO,IAEnCwH,EAAWxH,EAAO,KAAQA,EAAO,MAEzCyH,KACA9J,EAAC2L,KAAK,2BAA2BjI,KAAK,WAClC,GAAArB,EACA,IADAA,EAAS/M,EAAEjB,MAAM+D,KAAK,UACnB,MAAAyR,EAAAxH,EAAA,IACC,MAAG,OAAAyH,EAAAzH,EAAA,IACCyH,EAAWzH,EAAO,IAAI9J,KAAM8J,EAAO,IAEnCyH,EAAWzH,EAAO,KAAQA,EAAO,MAE7CgL,EAAQhL,OAAS,SAACvJ,GACd,GAAA4U,GAAAxK,EAAAlC,EAAAC,CAAA,KAAoB3J,EAAK+K,OAAOvJ,GAAhC,OAAO,CACP,KAAAoK,IAAA2G,GACI,GC8fR6D,EAAgB7D,EAAW3G,GD9fnBlC,EAAgB,IAAG,OAAAC,EAAAnI,EAAAoK,IAAAjC,EAAa,QAAhBhN,EAAA+E,KAA2B0U,EAA3B1M,IAAA,EAAhB,OAAO,CACX,QAAO,GAGXiG,QAAQsG,IAAIF,GACZ7E,EAAiBsE,GAAOrG,MAAM0B,EAAkBkF,GAEhDF,EAAiB7X,EAAEuC,UAAWP,GAC1BwK,KAAMuL,EAAQvL,KACdE,KAAMqL,EAAQrL,KACdG,SAAUkL,EAAQlL,SAClBD,SAAUmL,EAAQnL,SAClBpI,KAAMA,EACN+P,WAAYA,EACZC,WAAYA,EACZ6D,eAAgB7D,EAChBlI,eAAgBD,EAAWrI,MAC3BsU,aAAc9G,EAASgG,GAAOxT,QAElC0G,EAAC5H,KAAK,iBAAkB+U,GAGrB7V,EAAK0S,sBACJsD,EAAuBtN,EAAC2L,KAAK,iCAC7BrW,EAAEgY,GAAsBO,SAAS,MAC5B9T,KAAK,SAACC,EAAGC,GC8flB,MD9fwBjE,GAAYV,EAAE0E,GAAG2J,OAAQrO,EAAE2E,GAAG0J,UAC7CwH,SAASmC,IAGlB9E,EAAiBsE,GAAOT,IAAI,UAAW,GAEL,MAAA/U,EAAA2S,UC6fpC,MD7fE3S,GAAK2S,UAAUkD,KAlGD9Y,MAoGlBsU,EAAW,SAAA3I,GCggBb,MDhgBa,YCkgBX,MDhgBIwI,GAAiB6D,IAAI,UAAW,IAEhCyB,WAAWjF,EAAiB,MAJrBxU,MAmBRiD,EAAKyS,uBAAuB,GAAQL,GAEnCH,GAAQoC,KAAK,mBAAmBoC,QAAQvE,IAExCD,GAAQwE,QAAQzY,EAAE,QAAQiS,OAAOiC,KAGrCnV,KAAC8S,KAAKoC,IAIN9P,EAAAnC,EAAAwK,KAAAxH,EAAA,EAAAkK,EAAA/K,EAAAnF,OAAAgG,EAAAkK,EAAAlK,IC+eFtD,GAAIyC,EAAKa,GD9eHjG,KAACsX,KAAK,YAAYpE,OAAOlT,KAACsX,KAAK,SAASrW,EAAE0Y,QAAQhX,GAAGkS,IACzD,KAAAxP,EAAApC,EAAA0K,KAAAoG,EAAA,EAAAF,EAAAxO,EAAApF,OAAA8T,EAAAF,EAAAE,ICkfFpR,GAAI0C,EAAK0O,GDjfH/T,KAACsX,KAAK,YAAYpE,OAAOlT,KAACsX,KAAK,SAASrW,EAAE0Y,QAAQhX,GAAGkS,IACtD,OAAA5R,EAAAsK,gBACCvN,KAACsX,KAAK,kBAAkBrS,IAAIhC,EAAKsK,gBAErCqH,EAAgB,SAAAjJ,GCoflB,MDpfkB,UAAC8F,GACb,GAAG,MAAAxO,EAAAsW,aCqfL,MDpfM5N,GAAC2L,KAAK7F,GAAWxM,IAAIhC,EAAKsW,gBAFlBvZ,MAIhB4T,GAAgB,EAGhBW,EAAiB,SAAA5I,GCqfnB,MDrfmB,eAAA3L,MAoGjBqU,EAAU,SAAA1I,GCoZZ,MDpZY,eAAA3L,MAOVqU,IAEArU,KAACsX,KAAK,qBAAqBsC,UACnBC,OAAQ,SAACvI,EAAGwI,GAAO,GAAiB,MAAAA,EAAAC,OCgZ1C,MDhZyB1F,MACnB2F,YAAaha,KAACsX,KAAK,qBACnB2C,MAAO,KACPzD,YAAa,mBAjuBzB,MAAA7D,IAkuBMrB,EAAAqB,GACwB,mBAAAC,UAAA,OAAAA,SAA1BA,QAAQD,MAAMrB,EAAEuB,OAChB7S,KAAC8S,KAAK7P,EAAKgH,cAAcG,eAC7B,MAAOpK,WCmaZ2E,KAAK3E","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs) =>\n        #nulls first\n        return -1 if bs? and not as?\n        return  1 if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []\n            @sorters = opts.sorters ? {}\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n            @derivedAttributes = opts.derivedAttributes ? {}\n            @filter = opts.filter ? (-> true)\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                return if not @filter(record)\n                for k, v of criteria\n                    return if v != (record[k] ? \"null\")\n                callback(record)\n\n        arrSort: (attrs) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                v = (r,c) => @getAggregator(r,c).value()\n                switch @rowOrder\n                    when \"value_a_to_z\"  then @rowKeys.sort (a,b) =>  naturalSort v(a,[]), v(b,[])\n                    when \"value_z_to_a\" then @rowKeys.sort (a,b) => -naturalSort v(a,[]), v(b,[])\n                    else             @rowKeys.sort @arrSort(@rowAttrs)\n                switch @colOrder\n                    when \"value_a_to_z\"  then @colKeys.sort (a,b) =>  naturalSort v([],a), v([],b)\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -naturalSort v([],a), v([],b)\n                    else             @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            table: clickCallback: null\n            localeStrings: totals: \"Totals\"\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            if getClickHandler?\n                td.onclick = getClickHandler(val, rowKey, [])\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            if getClickHandler?\n                td.onclick = getClickHandler(val, [], colKey)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        if getClickHandler?\n            td.onclick = getClickHandler(val, [], [])\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            filter: -> true\n            sorters: {}\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            # rendererControl = $(\"<td>\")\n\n            # yaha par dekhna hai global select options for making chart\n\n            # renderer = $(\"<select>\")\n            #     .addClass('pvtRenderer')\n            #     .appendTo(rendererControl)\n            #     .bind \"change\", -> refresh() #capture reference\n            # for own x of opts.renderers\n            #     $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownAttributes\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\n                                        else if filter.startsWith(\"~\")  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                # .addClass('pvtRendererArea')\n                .appendTo(tr2)\n            \n            # pivotTableTr1 = $(\"<tr>\").appendTo(pivotTable)\n\n            # #the actual pivot table container\n            # pivotTableTr1Td1 = $(\"<td>\")\n            #     .attr(\"valign\", \"top\")\n            #     # .addClass('pvtRendererArea')\n            #     .appendTo(pivotTableTr1)\n\n            # tdDividedIntoTwoTd = $(\"<tr>\").appendTo(pivotTableTr1Td1)\n\n            # rendererControl = $(\"<td>\")\n            #     .attr(\"valign\", \"top\")\n            #     # .addClass('pvtRendererArea')\n            #     .appendTo(tdDividedIntoTwoTd)\n\n            # # tdDividedIntoTwoTd.append rendererControl\n\n            # #the actual pivot table container\n            # pivotTableTr1Td2 = $(\"<td>\")\n            #     .attr(\"valign\", \"top\")\n            #     .addClass('pvtRendererArea')\n            #     .appendTo(tdDividedIntoTwoTd)\n                \n            # renderer1 = $(\"<select>\")\n            #     .addClass('pvtRenderer')\n            #     .appendTo(rendererControl)\n            #     .bind \"change\", ->\n            #         selectOptions('pvtRenderer')\n            #         # pivotTableTr1Td2.pivotUI()\n            #         console.log(materializedInput)\n            #         # refreshDelayed()\n            #         # pivotTableTr1Td2.pivot(materializedInput,null)\n            #         refresh1() #capture reference\n            # for own x of opts.renderers\n            #     $(\"<option>\").val(x).html(x).appendTo(renderer1)\n\n            # renderer.append pivotTableTr1Td1\n\n            #  New customization by Ruchita\n\n            tdAdded = 0\n            addNewRow = null\n            pivotTableTr1Td1 = []\n            tdDividedIntoTwoTd = []\n            rendererControl = []\n            renderer = []\n            pivotTableTr1Td2 = []\n\n            addNewSlice = () =>\n                # pivotTableTr1Td1 = []\n                # tdDividedIntoTwoTd = []\n                # rendererControl = []\n                # renderer = []\n                # pivotTableTr1Td2 = []\n                rowId = Date.now()\n                if tdAdded == 0\n                    addNewRow = $(\"<tr>\")\n                    addNewRowInsidePivotTable = $(\"<tr>\").appendTo(pivotTable)\n                    pivotTableTr1Td1[rowId] = $(\"<td>\")\n                    .attr(\"valign\", \"top\")\n                    .appendTo(addNewRowInsidePivotTable)\n                    tdDividedIntoTwoTd[rowId] = addNewRow.appendTo(pivotTableTr1Td1[rowId]) # row add kardi\n\n                    rendererControl[rowId] = $(\"<td>\")\n                    .attr(\"valign\", \"top\")\n                    .appendTo(tdDividedIntoTwoTd[rowId])\n\n                    renderer[rowId] = $(\"<select>\")\n                        .addClass('pvtRenderer' + rowId)\n                        .appendTo(rendererControl[rowId])\n                        .bind \"change\", ->\n                            selectOptions('pvtRenderer' + rowId)\n                            refreshPlot(rowId) #capture reference\n                    for own x of opts.renderers\n                        $(\"<option>\").val(x).html(x).appendTo(renderer[rowId])\n                    #the actual pivot table container\n                    pivotTableTr1Td2[rowId] = $(\"<td>\")\n                        .attr(\"valign\", \"top\")\n                        .addClass('pvtRendererArea' + rowId)\n                        .appendTo(tdDividedIntoTwoTd[rowId])\n                        \n                    tdAdded = tdAdded + 1\n\n                else if tdAdded == 1\n                    pivotTableTr1Td2[rowId] = $(\"<td>\")\n                    .attr(\"valign\", \"top\")\n                    .appendTo(addNewRow)\n                    tdDividedIntoTwoTd[rowId] = $(\"<tr>\").appendTo(pivotTableTr1Td2[rowId])\n                    rendererControl[rowId] = $(\"<td>\")\n                    .attr(\"valign\", \"top\")\n                    .appendTo(tdDividedIntoTwoTd[rowId])\n                    renderer[rowId] = $(\"<select>\")\n                        .addClass('pvtRenderer' + rowId)\n                        .appendTo(rendererControl[rowId])\n                        .bind \"change\", ->\n                            selectOptions('pvtRenderer' + rowId)\n                            refreshPlot(rowId) #capture reference\n                    for own x of opts.renderers\n                        $(\"<option>\").val(x).html(x).appendTo(renderer[rowId])\n\n                    #the actual pivot table container\n                    pivotTableTr1Td2[rowId] = $(\"<td>\")\n                        .attr(\"valign\", \"top\")\n                        .addClass('pvtRendererArea')\n                        .appendTo(tdDividedIntoTwoTd[rowId])\n                    tdAdded = 0\n\n\n            $('#addslice').click(addNewSlice)\n\n\n            # End customization\n\n\n            #  second plot\n            # secondTd = $(\"<td>\")\n            #     .attr(\"valign\", \"top\")\n            #     # .addClass('pvtRendererArea')\n            #     .appendTo(pivotTableTr1)\n\n            # tdDividedIntoTwoNewTd = $(\"<tr>\").appendTo(secondTd)\n\n            # rendererControl2 = $(\"<td>\")\n            #     .attr(\"valign\", \"top\")\n            #     # .addClass('pvtRendererArea')\n            #     .appendTo(tdDividedIntoTwoNewTd)\n\n            # firstRowSecondTdSecondTd = $(\"<td>\")\n            #     .attr(\"valign\", \"top\")\n            #     .addClass('pvtRendererArea1')\n            #     .appendTo(tdDividedIntoTwoNewTd)\n\n            # renderer2 = $(\"<select>\")\n            #     .addClass('pvtRenderer1')\n            #     .appendTo(rendererControl2)\n            #     .bind \"change\", -> \n            #         selectOptions('pvtRenderer1')\n            #         # firstRowSecondTdSecondTd.pivotUI()\n            #         # refreshDelayed(firstRowSecondTdSecondTd)\n            #         # firstRowSecondTdSecondTd.pivot(materializedInput,null)\n            #         refresh2() #capture reference\n            # for own x of opts.renderers\n            #     $(\"<option>\").val(x).html(x).appendTo(renderer2)\n\n            # #the actual pivot table container\n            # firstRowSecondTdSecondTd = $(\"<td>\")\n            #     .attr(\"valign\", \"top\")\n            #     .addClass('pvtRendererArea')\n            #     .appendTo(tdDividedIntoTwoNewTd)\n            \n\n            #set up for refreshing\n            refreshDelayed = () =>\n                console.log(\"vdbhbvhfvh\")\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer[rowId].val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTableTr1Td2.pivot(materializedInput,subopts)\n                # pivotTableTr1Td2.pivot(materializedInput,subopts)\n                # pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer[rowId].val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTableTr1Td2.css(\"opacity\", 1)\n                # pivotTableTr1Td2.css(\"opacity\", 1)\n                # pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refreshPlot = (rowId) =>\n                pivotTableTr1Td2[rowId].css(\"opacity\", 0.5)\n                console.log(\"here\")\n                refreshDelayed1(rowId)\n\n\n\n\n\n\n            #set up for refreshing\n            refreshDelayed1 = (rowId) =>\n                console.log(\"vdbhbvhfvh\")\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer[rowId].val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                # firstRowSecondTdSecondTd.pivot(materializedInput,subopts)\n                console.log(subopts)\n                pivotTableTr1Td2[rowId].pivot(materializedInput,subopts)\n                # pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer[rowId].val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                # firstRowSecondTdSecondTd.css(\"opacity\", 1)\n                pivotTableTr1Td2[rowId].css(\"opacity\", 1)\n                # pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh1 = =>\n                # firstRowSecondTdSecondTd.css(\"opacity\", 0.5)\n                pivotTableTr1Td2.css(\"opacity\", 0.5)\n                # pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed1, 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                # uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            \n            selectOptions = (className) =>\n                if opts.rendererName?\n                    @find(className).val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = () =>\n                # console.log(\"do not disturb\")\n                # subopts =\n                #     derivedAttributes: opts.derivedAttributes\n                #     localeStrings: opts.localeStrings\n                #     rendererOptions: opts.rendererOptions\n                #     sorters: opts.sorters\n                #     cols: [], rows: []\n                #     dataClass: opts.dataClass\n\n                # numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                # vals = []\n                # @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                # @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                # @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                #     if numInputsToProcess == 0\n                #         $(this).remove()\n                #     else\n                #         numInputsToProcess--\n                #         vals.push $(this).val() if $(this).val() != \"\"\n\n                # if numInputsToProcess != 0\n                #     pvtVals = @find(\".pvtVals\")\n                #     for x in [0...numInputsToProcess]\n                #         newDropdown = $(\"<select>\")\n                #             .addClass('pvtAttrDropdown')\n                #             .append($(\"<option>\"))\n                #             .bind \"change\", -> refresh()\n                #         for attr in shownAttributes\n                #             newDropdown.append($(\"<option>\").val(attr).text(attr))\n                #         pvtVals.append(newDropdown)\n\n                # if initialRender\n                #     vals = opts.vals\n                #     i = 0\n                #     @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                #         $(this).val vals[i]\n                #         i++\n                #     initialRender = false\n\n                # subopts.aggregatorName = aggregator.val()\n                # subopts.vals = vals\n                # subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                # console.log(opts.renderers[renderer.val()])\n                # subopts.renderer = opts.renderers[renderer.val()]\n                # subopts.rowOrder = rowOrderArrow.data(\"order\")\n                # subopts.colOrder = colOrderArrow.data(\"order\")\n                # #construct filter here\n                # exclusions = {}\n                # @find('input.pvtFilter').not(':checked').each ->\n                #     filter = $(this).data(\"filter\")\n                #     if exclusions[filter[0]]?\n                #         exclusions[filter[0]].push( filter[1] )\n                #     else\n                #         exclusions[filter[0]] = [ filter[1] ]\n                # #include inclusions when exclusions present\n                # inclusions = {}\n                # @find('input.pvtFilter:checked').each ->\n                #     filter = $(this).data(\"filter\")\n                #     if exclusions[filter[0]]?\n                #         if inclusions[filter[0]]?\n                #             inclusions[filter[0]].push( filter[1] )\n                #         else\n                #             inclusions[filter[0]] = [ filter[1] ]\n\n                # subopts.filter = (record) ->\n                #     return false if not opts.filter(record)\n                #     for k,excludedItems of exclusions\n                #         return false if \"\"+(record[k] ? 'null') in excludedItems\n                #     return true\n\n                # firstRowSecondTdSecondTd.pivot(materializedInput,subopts)\n                # pivotTableTr1Td2.pivot(materializedInput,subopts)\n                # # pivotTable.pivot(materializedInput,subopts)\n                # pivotUIOptions = $.extend {}, opts,\n                #     cols: subopts.cols\n                #     rows: subopts.rows\n                #     colOrder: subopts.colOrder\n                #     rowOrder: subopts.rowOrder\n                #     vals: vals\n                #     exclusions: exclusions\n                #     inclusions: inclusions\n                #     inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                #     aggregatorName: aggregator.val()\n                #     rendererName: renderer.val()\n\n                # @data \"pivotUIOptions\", pivotUIOptions\n\n                # # if requested make sure unused columns are in alphabetical order\n                # if opts.autoSortUnusedAttrs\n                #     unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                #     $(unusedAttrsContainer).children(\"li\")\n                #         .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                #         .appendTo unusedAttrsContainer\n\n                # firstRowSecondTdSecondTd.css(\"opacity\", 1)\n                # pivotTableTr1Td2.css(\"opacity\", 1)\n                # # pivotTable.css(\"opacity\", 1)\n                # opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                # firstRowSecondTdSecondTd.css(\"opacity\", 0.5)\n                # pivotTableTr1Td2.css(\"opacity\", 0.5)\n                # pivotTable.css(\"opacity\", 0.5)\n                # setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    # $.fn.heatmap = (scope = \"heatmap\", opts) ->\n    #     numRows = @data \"numrows\"\n    #     numCols = @data \"numcols\"\n\n    #     # given a series of values\n    #     # must return a function to map a given value to a CSS color\n    #     colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n    #     colorScaleGenerator ?= (values) ->\n    #         min = Math.min(values...)\n    #         max = Math.max(values...)\n    #         return (x) ->\n    #             nonRed = 255 - Math.round 255*(x-min)/(max-min)\n    #             return \"rgb(255,#{nonRed},#{nonRed})\"\n\n    #     heatmapper = (scope) =>\n    #         forEachCell = (f) =>\n    #             @find(scope).each ->\n    #                 x = $(this).data(\"value\")\n    #                 f(x, $(this)) if x? and isFinite(x)\n\n    #         values = []\n    #         forEachCell (x) -> values.push x\n    #         colorScale = colorScaleGenerator(values)\n    #         forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n    #     switch scope\n    #         when \"heatmap\"    then heatmapper \".pvtVal\"\n    #         when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n    #         when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n    #     heatmapper \".pvtTotal.rowTotal\"\n    #     heatmapper \".pvtTotal.colTotal\"\n\n    #     return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    # $.fn.barchart =  ->\n    #     numRows = @data \"numrows\"\n    #     numCols = @data \"numcols\"\n\n    #     barcharter = (scope) =>\n    #         forEachCell = (f) =>\n    #             @find(scope).each ->\n    #                 x = $(this).data(\"value\")\n    #                 f(x, $(this)) if x? and isFinite(x)\n\n    #         values = []\n    #         forEachCell (x) -> values.push x\n    #         max = Math.max(values...)\n    #         scaler = (x) -> 100*x/(1.4*max)\n    #         forEachCell (x, elem) ->\n    #             text = elem.text()\n    #             wrapper = $(\"<div>\").css\n    #                 \"position\": \"relative\"\n    #                 \"height\": \"55px\"\n    #             wrapper.append $(\"<div>\").css\n    #                 \"position\": \"absolute\"\n    #                 \"bottom\": 0\n    #                 \"left\": 0\n    #                 \"right\": 0\n    #                 \"height\": scaler(x) + \"%\"\n    #                 \"background-color\": \"gray\"\n    #             wrapper.append $(\"<div>\").text(text).css\n    #                 \"position\":\"relative\"\n    #                 \"padding-left\":\"5px\"\n    #                 \"padding-right\":\"5px\"\n\n    #             elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n    #     barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n    #     barcharter \".pvtTotal.colTotal\"\n\n    #     return this\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, rd, renderers, rx, rz, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, nas, nbs;\n        if ((bs != null) && (as == null)) {\n          return -1;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.colAttrs = (ref2 = opts.cols) != null ? ref2 : [];\n        this.rowAttrs = (ref3 = opts.rows) != null ? ref3 : [];\n        this.valAttrs = (ref4 = opts.vals) != null ? ref4 : [];\n        this.sorters = (ref5 = opts.sorters) != null ? ref5 : {};\n        this.rowOrder = (ref6 = opts.rowOrder) != null ? ref6 : \"key_a_to_z\";\n        this.colOrder = (ref7 = opts.colOrder) != null ? ref7 : \"key_a_to_z\";\n        this.derivedAttributes = (ref8 = opts.derivedAttributes) != null ? ref8 : {};\n        this.filter = (ref9 = opts.filter) != null ? ref9 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var v;\n        if (!this.sorted) {\n          this.sorted = true;\n          v = (function(_this) {\n            return function(r, c) {\n              return _this.getAggregator(r, c).value();\n            };\n          })(this);\n          switch (this.rowOrder) {\n            case \"value_a_to_z\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            case \"value_z_to_a\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            default:\n              this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          }\n          switch (this.colOrder) {\n            case \"value_a_to_z\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            case \"value_z_to_a\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            default:\n              return this.colKeys.sort(this.arrSort(this.colAttrs));\n          }\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, getClickHandler, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        table: {\n          clickCallback: null\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, rowKey, []);\n        }\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, [], colKey);\n        }\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      if (getClickHandler != null) {\n        td.onclick = getClickHandler(val, [], []);\n      }\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    return $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, addNewRow, addNewSlice, aggregator, attr, attrLength, attrValues, colOrderArrow, defaults, e, existingOpts, fn1, i, initialRender, l, len1, len2, len3, localeDefaults, localeStrings, materializedInput, n, o, opts, ordering, pivotTable, pivotTableTr1Td1, pivotTableTr1Td2, recordsProcessed, ref, ref1, ref2, refresh, refresh1, refreshDelayed, refreshDelayed1, refreshPlot, renderer, rendererControl, rowOrderArrow, selectOptions, shownAttributes, tdAdded, tdDividedIntoTwoTd, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: {}\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            a = shownAttributes[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref) >= 0;\n                  };\n                };\n                accept = filter.startsWith(\">=\") ? accept_gen(\">=\", [1, 0]) : filter.startsWith(\"<=\") ? accept_gen(\"<=\", [-1, 0]) : filter.startsWith(\">\") ? accept_gen(\">\", [1]) : filter.startsWith(\"<\") ? accept_gen(\"<\", [-1]) : filter.startsWith(\"~\") ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref.length; n < len2; n++) {\n              value = ref[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref1, top;\n            ref1 = $(e.currentTarget).position(), left = ref1.left, top = ref1.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          attr = shownAttributes[i];\n          fn1(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.aggregators;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").appendTo(tr2);\n        tdAdded = 0;\n        addNewRow = null;\n        pivotTableTr1Td1 = [];\n        tdDividedIntoTwoTd = [];\n        rendererControl = [];\n        renderer = [];\n        pivotTableTr1Td2 = [];\n        addNewSlice = (function(_this) {\n          return function() {\n            var addNewRowInsidePivotTable, ref1, ref2, rowId;\n            rowId = Date.now();\n            if (tdAdded === 0) {\n              addNewRow = $(\"<tr>\");\n              addNewRowInsidePivotTable = $(\"<tr>\").appendTo(pivotTable);\n              pivotTableTr1Td1[rowId] = $(\"<td>\").attr(\"valign\", \"top\").appendTo(addNewRowInsidePivotTable);\n              tdDividedIntoTwoTd[rowId] = addNewRow.appendTo(pivotTableTr1Td1[rowId]);\n              rendererControl[rowId] = $(\"<td>\").attr(\"valign\", \"top\").appendTo(tdDividedIntoTwoTd[rowId]);\n              renderer[rowId] = $(\"<select>\").addClass('pvtRenderer' + rowId).appendTo(rendererControl[rowId]).bind(\"change\", function() {\n                selectOptions('pvtRenderer' + rowId);\n                return refreshPlot(rowId);\n              });\n              ref1 = opts.renderers;\n              for (x in ref1) {\n                if (!hasProp.call(ref1, x)) continue;\n                $(\"<option>\").val(x).html(x).appendTo(renderer[rowId]);\n              }\n              pivotTableTr1Td2[rowId] = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea' + rowId).appendTo(tdDividedIntoTwoTd[rowId]);\n              return tdAdded = tdAdded + 1;\n            } else if (tdAdded === 1) {\n              pivotTableTr1Td2[rowId] = $(\"<td>\").attr(\"valign\", \"top\").appendTo(addNewRow);\n              tdDividedIntoTwoTd[rowId] = $(\"<tr>\").appendTo(pivotTableTr1Td2[rowId]);\n              rendererControl[rowId] = $(\"<td>\").attr(\"valign\", \"top\").appendTo(tdDividedIntoTwoTd[rowId]);\n              renderer[rowId] = $(\"<select>\").addClass('pvtRenderer' + rowId).appendTo(rendererControl[rowId]).bind(\"change\", function() {\n                selectOptions('pvtRenderer' + rowId);\n                return refreshPlot(rowId);\n              });\n              ref2 = opts.renderers;\n              for (x in ref2) {\n                if (!hasProp.call(ref2, x)) continue;\n                $(\"<option>\").val(x).html(x).appendTo(renderer[rowId]);\n              }\n              pivotTableTr1Td2[rowId] = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tdDividedIntoTwoTd[rowId]);\n              return tdAdded = 0;\n            }\n          };\n        })(this);\n        $('#addslice').click(addNewSlice);\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, initialRender, len2, n, newDropdown, numInputsToProcess, o, pivotUIOptions, pvtVals, ref1, ref2, subopts, unusedAttrsContainer, vals;\n            console.log(\"vdbhbvhfvh\");\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref1 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref1 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = n = 0, ref2 = numInputsToProcess; 0 <= ref2 ? n < ref2 : n > ref2; x = 0 <= ref2 ? ++n : --n) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (o = 0, len2 = shownAttributes.length; o < len2; o++) {\n                  attr = shownAttributes[o];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer[rowId].val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref3, ref4;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref3 = \"\" + ((ref4 = record[k]) != null ? ref4 : 'null'), indexOf.call(excludedItems, ref3) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTableTr1Td2.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer[rowId].val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTableTr1Td2.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refreshPlot = (function(_this) {\n          return function(rowId) {\n            pivotTableTr1Td2[rowId].css(\"opacity\", 0.5);\n            console.log(\"here\");\n            return refreshDelayed1(rowId);\n          };\n        })(this);\n        refreshDelayed1 = (function(_this) {\n          return function(rowId) {\n            var exclusions, inclusions, initialRender, len2, n, newDropdown, numInputsToProcess, o, pivotUIOptions, pvtVals, ref1, ref2, subopts, unusedAttrsContainer, vals;\n            console.log(\"vdbhbvhfvh\");\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref1 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref1 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = n = 0, ref2 = numInputsToProcess; 0 <= ref2 ? n < ref2 : n > ref2; x = 0 <= ref2 ? ++n : --n) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (o = 0, len2 = shownAttributes.length; o < len2; o++) {\n                  attr = shownAttributes[o];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer[rowId].val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref3, ref4;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref3 = \"\" + ((ref4 = record[k]) != null ? ref4 : 'null'), indexOf.call(excludedItems, ref3) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            console.log(subopts);\n            pivotTableTr1Td2[rowId].pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer[rowId].val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTableTr1Td2[rowId].css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh1 = (function(_this) {\n          return function() {\n            pivotTableTr1Td2.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed1, 10);\n          };\n        })(this);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(unused));\n        }\n        this.html(uiTable);\n        ref1 = opts.cols;\n        for (n = 0, len2 = ref1.length; n < len2; n++) {\n          x = ref1[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref2 = opts.rows;\n        for (o = 0, len3 = ref2.length; o < len3; o++) {\n          x = ref2[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        selectOptions = (function(_this) {\n          return function(className) {\n            if (opts.rendererName != null) {\n              return _this.find(className).val(opts.rendererName);\n            }\n          };\n        })(this);\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {};\n        })(this);\n        refresh = (function(_this) {\n          return function() {};\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n\n    /*\n    Barchart post-processing\n     */\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}