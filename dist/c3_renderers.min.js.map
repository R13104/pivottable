{"version":3,"sources":["c3_renderers.coffee","c3_renderers.min.js"],"names":["callWithJQuery","pivotModule","exports","module","require","define","amd","jQuery","c3","$","makeC3Chart","chartOpts","pivotData","opts","a","agg","attrs","base","base1","base2","base3","base4","base5","c","categories","colKey","colKeys","columns","dataColumns","defaults","fullAggName","groupByTitle","h","hAxisTitle","headers","i","j","k","l","len","len1","len2","len3","len4","len5","m","metaboliteName","metabolites","metadata","n","numCharsInHAxis","numSeries","params","ref","ref1","ref2","ref3","ref4","ref5","renderArea","result","rotationAngle","rowKey","rowKeys","s","scatterData","series","title","titleText","vAxisTitle","vals","x","xs","console","log","localeStrings","vs","by","extend","size","width","window","innerWidth","height","innerHeight","type","horizontal","stacked","getRowKeys","length","push","getColKeys","results","join","aggregatorName","valAttrs","y","t","rowAttrs","concat","colAttrs","slice","getAggregator","value","format","input","indexOf","style","text","axis","rotated","label","tick","rotate","multiline","data","order","tooltip","grouped","color","pattern","fit","legend","show","name","b","d","len6","o","shift","unshift","rows","groups","appendTo","bindto","generate","detach","remove","append","pivotUtilities","c3_renderers","Bar Chart","Line Chart","call","this"],"mappings":"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","file":"c3_renderers.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\"), require(\"c3\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\", \"c3\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery, c3\n\ncallWithJQuery ($, c3) ->\n\n    makeC3Chart = (chartOpts = {}) -> (pivotData, opts) ->\n        console.log(pivotData)\n        defaults =\n            localeStrings: {vs: \"vs\", by: \"by\"}\n            c3: {}\n\n        opts = $.extend(true, {}, defaults, opts)\n        opts.c3.size ?= {}\n        opts.c3.size.width ?= window.innerWidth / 1.4\n        opts.c3.size.height ?= window.innerHeight / 1.4 - 50\n        chartOpts.type ?= \"line\"\n        chartOpts.horizontal ?= false\n        chartOpts.stacked ?= false\n\n        rowKeys = pivotData.getRowKeys() # state\n        rowKeys.push [] if rowKeys.length == 0\n        colKeys = pivotData.getColKeys() # intensities\n        colKeys.push [] if colKeys.length == 0\n\n        headers = (h.join(\"-\") for h in colKeys) # intensities\n        rotationAngle = 0\n\n        fullAggName = pivotData.aggregatorName\n        if pivotData.valAttrs.length\n            fullAggName += \"(#{pivotData.valAttrs.join(\", \")})\"\n\n        if chartOpts.type == \"scatter\"\n            scatterData = x:{}, y:{}, t:{}\n            attrs = pivotData.rowAttrs.concat(pivotData.colAttrs)\n            # console.log(attrs)\n            vAxisTitle = attrs[0] ? \"\"\n            hAxisTitle = attrs[1] ? \"\"\n            groupByTitle = attrs.slice(2).join(\"-\")\n            titleText = vAxisTitle\n            titleText += \" #{opts.localeStrings.vs} #{hAxisTitle}\" if hAxisTitle != \"\"\n            titleText += \" #{opts.localeStrings.by} #{groupByTitle}\" if groupByTitle != \"\"\n            for rowKey in rowKeys\n                for colKey in colKeys\n                    agg = pivotData.getAggregator(rowKey, colKey)\n                    # console.log(pivotData)\n                    if agg.value()?\n                        vals = rowKey.concat(colKey)\n                        series = vals.slice(2).join(\"-\")\n                        if series == \"\" then series = \"series\"\n                        scatterData.x[series] ?= []\n                        scatterData.y[series] ?= []\n                        scatterData.t[series] ?= []\n                        scatterData.y[series].push vals[0] ? 0\n                        scatterData.x[series].push vals[1] ? 0\n                        scatterData.t[series].push agg.format(agg.value())\n        else\n            numCharsInHAxis = 0\n            for x in headers\n                numCharsInHAxis += x.length\n            if numCharsInHAxis > 50\n                rotationAngle = 45\n\n            # columns = [\n            #     [pivotData.input[0].metabolite_id, pivotData.input[0].intensity, pivotData.input[1].intensity]\n            # ]\n            metabolites = []\n            columns = [\n                ['x', headers[0], headers[1]]\n            ]\n            a = pivotData.rowAttrs[0]\n            console.log(a)\n            for metadata in pivotData.input\n                if metadata[a].indexOf(columns) != 1\n                    columns.push([metadata[a]])\n                    break\n            console.log(columns)\n            for metaboliteName in columns\n                for metadata in pivotData.input\n                    if metaboliteName[0] == metadata[a]\n                        metaboliteName.push metadata[pivotData['aggregatorName']]\n\n            # for rowKey in rowKeys\n            #     rowHeader = rowKey.join(\"-\")\n            #     row = [if rowHeader == \"\" then fullAggName else rowHeader]\n            #     for colKey in colKeys\n            #         # if colKey < 1000\n            #         # val = parseFloat  pivotData.getAggregator(rowKey, colKey).value()\n            #         # if isFinite(val)\n            #         #     if val < 1\n            #         #         row.push val.toPrecision(3)\n            #         #     else\n            #         #         row.push val.toFixed(3)\n            #         # else\n            #         #     row.push null\n            #         row.push colKey\n                # columns.push row\n\n                # console.log(columns)\n\n            vAxisTitle = fullAggName\n\n            if chartOpts.horizontal\n                hAxisTitle = pivotData.rowAttrs.join(\"-\")\n                groupByTitle = pivotData.colAttrs.join(\"-\")\n            else\n                hAxisTitle = pivotData.colAttrs.join(\"-\")\n                groupByTitle = pivotData.rowAttrs.join(\"-\")\n            titleText = fullAggName\n            titleText += \" #{opts.localeStrings.vs} #{hAxisTitle}\" if hAxisTitle != \"\"\n            titleText += \" #{opts.localeStrings.by} #{groupByTitle}\" if groupByTitle != \"\"\n\n        title = $(\"<p>\", {style: \"text-align: center; font-weight: bold\"})\n        title.text(titleText)\n\n        params =\n            axis:\n                rotated: chartOpts.horizontal\n                y:\n                    label: vAxisTitle\n                x:\n                    label: hAxisTitle\n                    tick:\n                        rotate: rotationAngle\n                        multiline: false\n            data:\n                x: 'x'\n                type: chartOpts.type\n                order: null\n            tooltip:\n                grouped: false\n            color:\n                pattern: [ \"#3366cc\", \"#dc3912\", \"#ff9900\", \"#109618\",\n                           \"#990099\", \"#0099c6\", \"#dd4477\", \"#66aa00\",\n                           \"#b82e2e\", \"#316395\", \"#994499\", \"#22aa99\",\n                           \"#aaaa11\", \"#6633cc\", \"#e67300\", \"#8b0707\",\n                           \"#651067\", \"#329262\", \"#5574a6\", \"#3b3eac\" ]\n\n\n        params = $.extend(true, {}, params, opts.c3)\n\n        if chartOpts.type == \"scatter\"\n            xs = {}\n            numSeries = 0\n            dataColumns = []\n            for s of scatterData.x\n                numSeries += 1\n                xs[s] = s+\"_x\"\n                dataColumns.push [s+\"_x\"].concat(scatterData.x[s])\n                dataColumns.push [s].concat(scatterData.y[s])\n            params.data.xs = xs\n            params.data.columns = dataColumns\n            params.axis.x.tick = fit: false\n            if numSeries == 1\n                params.legend = show: false\n            params.tooltip.format =\n                title: -> fullAggName\n                name: -> \"\"\n                value: (a,b,c,d) -> scatterData.t[c][d]\n        else\n            params.axis.x.type= 'category'\n\n            if chartOpts.horizontal\n                categories = (c.shift() for c in columns)\n                if categories.length == 1 and categories[0] == fullAggName\n                    categories = [\"\"]\n                params.axis.x.categories = categories\n                if headers.length == 1 and headers[0] == \"\"\n                    headers = [fullAggName]\n                columns.unshift(headers)\n                params.data.rows = columns\n            else\n                console.log(params)\n                # params.axis.x.categories = headers\n                console.log(columns)\n                params.data.columns = columns\n\n\n        if chartOpts.stacked\n            if chartOpts.horizontal\n                params.data.groups = [x.join(\"-\") for x in colKeys]\n            else\n                params.data.groups = [x.join(\"-\") for x in rowKeys]\n\n        renderArea = $(\"<div>\", style: \"display:none;\").appendTo $(\"body\")\n        result = $(\"<div>\").appendTo renderArea\n        params.bindto = result[0]\n        c3.generate params\n        result.detach()\n        renderArea.remove()\n        return $(\"<div>\").append title, result\n\n    $.pivotUtilities.c3_renderers =\n        # \"Horizontal Bar Chart\": makeC3Chart(type: \"bar\", horizontal: true)\n        # \"Horizontal Stacked Bar Chart\": makeC3Chart(type: \"bar\", stacked: true, horizontal: true)\n        \"Bar Chart\": makeC3Chart(type: \"bar\")\n        # \"Stacked Bar Chart\": makeC3Chart(type: \"bar\", stacked: true)\n        \"Line Chart\": makeC3Chart()\n        # \"Area Chart\": makeC3Chart(type: \"area\", stacked: true)\n        # \"Scatter Chart\": makeC3Chart(type: \"scatter\")\n        # \"Pie Chart\": makeC3Chart(type: \"pie\")\n        # \"Volcano Chart\": makeC3Chart(type: \"volcano\")\n","(function() {\n  var callWithJQuery;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"), require(\"c3\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\", \"c3\"], pivotModule);\n    } else {\n      return pivotModule(jQuery, c3);\n    }\n  };\n\n  callWithJQuery(function($, c3) {\n    var makeC3Chart;\n    makeC3Chart = function(chartOpts) {\n      if (chartOpts == null) {\n        chartOpts = {};\n      }\n      return function(pivotData, opts) {\n        var a, agg, attrs, base, base1, base2, base3, base4, base5, c, categories, colKey, colKeys, columns, dataColumns, defaults, fullAggName, groupByTitle, h, hAxisTitle, headers, i, j, k, l, len, len1, len2, len3, len4, len5, m, metaboliteName, metabolites, metadata, n, numCharsInHAxis, numSeries, params, ref, ref1, ref2, ref3, ref4, ref5, renderArea, result, rotationAngle, rowKey, rowKeys, s, scatterData, series, title, titleText, vAxisTitle, vals, x, xs;\n        console.log(pivotData);\n        defaults = {\n          localeStrings: {\n            vs: \"vs\",\n            by: \"by\"\n          },\n          c3: {}\n        };\n        opts = $.extend(true, {}, defaults, opts);\n        if ((base = opts.c3).size == null) {\n          base.size = {};\n        }\n        if ((base1 = opts.c3.size).width == null) {\n          base1.width = window.innerWidth / 1.4;\n        }\n        if ((base2 = opts.c3.size).height == null) {\n          base2.height = window.innerHeight / 1.4 - 50;\n        }\n        if (chartOpts.type == null) {\n          chartOpts.type = \"line\";\n        }\n        if (chartOpts.horizontal == null) {\n          chartOpts.horizontal = false;\n        }\n        if (chartOpts.stacked == null) {\n          chartOpts.stacked = false;\n        }\n        rowKeys = pivotData.getRowKeys();\n        if (rowKeys.length === 0) {\n          rowKeys.push([]);\n        }\n        colKeys = pivotData.getColKeys();\n        if (colKeys.length === 0) {\n          colKeys.push([]);\n        }\n        headers = (function() {\n          var i, len, results;\n          results = [];\n          for (i = 0, len = colKeys.length; i < len; i++) {\n            h = colKeys[i];\n            results.push(h.join(\"-\"));\n          }\n          return results;\n        })();\n        rotationAngle = 0;\n        fullAggName = pivotData.aggregatorName;\n        if (pivotData.valAttrs.length) {\n          fullAggName += \"(\" + (pivotData.valAttrs.join(\", \")) + \")\";\n        }\n        if (chartOpts.type === \"scatter\") {\n          scatterData = {\n            x: {},\n            y: {},\n            t: {}\n          };\n          attrs = pivotData.rowAttrs.concat(pivotData.colAttrs);\n          vAxisTitle = (ref = attrs[0]) != null ? ref : \"\";\n          hAxisTitle = (ref1 = attrs[1]) != null ? ref1 : \"\";\n          groupByTitle = attrs.slice(2).join(\"-\");\n          titleText = vAxisTitle;\n          if (hAxisTitle !== \"\") {\n            titleText += \" \" + opts.localeStrings.vs + \" \" + hAxisTitle;\n          }\n          if (groupByTitle !== \"\") {\n            titleText += \" \" + opts.localeStrings.by + \" \" + groupByTitle;\n          }\n          for (i = 0, len = rowKeys.length; i < len; i++) {\n            rowKey = rowKeys[i];\n            for (j = 0, len1 = colKeys.length; j < len1; j++) {\n              colKey = colKeys[j];\n              agg = pivotData.getAggregator(rowKey, colKey);\n              if (agg.value() != null) {\n                vals = rowKey.concat(colKey);\n                series = vals.slice(2).join(\"-\");\n                if (series === \"\") {\n                  series = \"series\";\n                }\n                if ((base3 = scatterData.x)[series] == null) {\n                  base3[series] = [];\n                }\n                if ((base4 = scatterData.y)[series] == null) {\n                  base4[series] = [];\n                }\n                if ((base5 = scatterData.t)[series] == null) {\n                  base5[series] = [];\n                }\n                scatterData.y[series].push((ref2 = vals[0]) != null ? ref2 : 0);\n                scatterData.x[series].push((ref3 = vals[1]) != null ? ref3 : 0);\n                scatterData.t[series].push(agg.format(agg.value()));\n              }\n            }\n          }\n        } else {\n          numCharsInHAxis = 0;\n          for (k = 0, len2 = headers.length; k < len2; k++) {\n            x = headers[k];\n            numCharsInHAxis += x.length;\n          }\n          if (numCharsInHAxis > 50) {\n            rotationAngle = 45;\n          }\n          metabolites = [];\n          columns = [['x', headers[0], headers[1]]];\n          a = pivotData.rowAttrs[0];\n          console.log(a);\n          ref4 = pivotData.input;\n          for (l = 0, len3 = ref4.length; l < len3; l++) {\n            metadata = ref4[l];\n            if (metadata[a].indexOf(columns) !== 1) {\n              columns.push([metadata[a]]);\n              break;\n            }\n          }\n          console.log(columns);\n          for (m = 0, len4 = columns.length; m < len4; m++) {\n            metaboliteName = columns[m];\n            ref5 = pivotData.input;\n            for (n = 0, len5 = ref5.length; n < len5; n++) {\n              metadata = ref5[n];\n              if (metaboliteName[0] === metadata[a]) {\n                metaboliteName.push(metadata[pivotData['aggregatorName']]);\n              }\n            }\n          }\n          vAxisTitle = fullAggName;\n          if (chartOpts.horizontal) {\n            hAxisTitle = pivotData.rowAttrs.join(\"-\");\n            groupByTitle = pivotData.colAttrs.join(\"-\");\n          } else {\n            hAxisTitle = pivotData.colAttrs.join(\"-\");\n            groupByTitle = pivotData.rowAttrs.join(\"-\");\n          }\n          titleText = fullAggName;\n          if (hAxisTitle !== \"\") {\n            titleText += \" \" + opts.localeStrings.vs + \" \" + hAxisTitle;\n          }\n          if (groupByTitle !== \"\") {\n            titleText += \" \" + opts.localeStrings.by + \" \" + groupByTitle;\n          }\n        }\n        title = $(\"<p>\", {\n          style: \"text-align: center; font-weight: bold\"\n        });\n        title.text(titleText);\n        params = {\n          axis: {\n            rotated: chartOpts.horizontal,\n            y: {\n              label: vAxisTitle\n            },\n            x: {\n              label: hAxisTitle,\n              tick: {\n                rotate: rotationAngle,\n                multiline: false\n              }\n            }\n          },\n          data: {\n            x: 'x',\n            type: chartOpts.type,\n            order: null\n          },\n          tooltip: {\n            grouped: false\n          },\n          color: {\n            pattern: [\"#3366cc\", \"#dc3912\", \"#ff9900\", \"#109618\", \"#990099\", \"#0099c6\", \"#dd4477\", \"#66aa00\", \"#b82e2e\", \"#316395\", \"#994499\", \"#22aa99\", \"#aaaa11\", \"#6633cc\", \"#e67300\", \"#8b0707\", \"#651067\", \"#329262\", \"#5574a6\", \"#3b3eac\"]\n          }\n        };\n        params = $.extend(true, {}, params, opts.c3);\n        if (chartOpts.type === \"scatter\") {\n          xs = {};\n          numSeries = 0;\n          dataColumns = [];\n          for (s in scatterData.x) {\n            numSeries += 1;\n            xs[s] = s + \"_x\";\n            dataColumns.push([s + \"_x\"].concat(scatterData.x[s]));\n            dataColumns.push([s].concat(scatterData.y[s]));\n          }\n          params.data.xs = xs;\n          params.data.columns = dataColumns;\n          params.axis.x.tick = {\n            fit: false\n          };\n          if (numSeries === 1) {\n            params.legend = {\n              show: false\n            };\n          }\n          params.tooltip.format = {\n            title: function() {\n              return fullAggName;\n            },\n            name: function() {\n              return \"\";\n            },\n            value: function(a, b, c, d) {\n              return scatterData.t[c][d];\n            }\n          };\n        } else {\n          params.axis.x.type = 'category';\n          if (chartOpts.horizontal) {\n            categories = (function() {\n              var len6, o, results;\n              results = [];\n              for (o = 0, len6 = columns.length; o < len6; o++) {\n                c = columns[o];\n                results.push(c.shift());\n              }\n              return results;\n            })();\n            if (categories.length === 1 && categories[0] === fullAggName) {\n              categories = [\"\"];\n            }\n            params.axis.x.categories = categories;\n            if (headers.length === 1 && headers[0] === \"\") {\n              headers = [fullAggName];\n            }\n            columns.unshift(headers);\n            params.data.rows = columns;\n          } else {\n            console.log(params);\n            console.log(columns);\n            params.data.columns = columns;\n          }\n        }\n        if (chartOpts.stacked) {\n          if (chartOpts.horizontal) {\n            params.data.groups = [\n              (function() {\n                var len6, o, results;\n                results = [];\n                for (o = 0, len6 = colKeys.length; o < len6; o++) {\n                  x = colKeys[o];\n                  results.push(x.join(\"-\"));\n                }\n                return results;\n              })()\n            ];\n          } else {\n            params.data.groups = [\n              (function() {\n                var len6, o, results;\n                results = [];\n                for (o = 0, len6 = rowKeys.length; o < len6; o++) {\n                  x = rowKeys[o];\n                  results.push(x.join(\"-\"));\n                }\n                return results;\n              })()\n            ];\n          }\n        }\n        renderArea = $(\"<div>\", {\n          style: \"display:none;\"\n        }).appendTo($(\"body\"));\n        result = $(\"<div>\").appendTo(renderArea);\n        params.bindto = result[0];\n        c3.generate(params);\n        result.detach();\n        renderArea.remove();\n        return $(\"<div>\").append(title, result);\n      };\n    };\n    return $.pivotUtilities.c3_renderers = {\n      \"Bar Chart\": makeC3Chart({\n        type: \"bar\"\n      }),\n      \"Line Chart\": makeC3Chart()\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=c3_renderers.js.map\n"]}