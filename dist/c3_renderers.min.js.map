{"version":3,"sources":["c3_renderers.coffee","c3_renderers.min.js"],"names":["callWithJQuery","pivotModule","exports","module","require","define","amd","jQuery","c3","$","makeC3Chart","chartOpts","pivotData","opts","a","agg","attrs","base","base1","base2","base3","base4","base5","c","categories","colKey","colKeys","columns","dataColumns","defaults","fullAggName","groupByTitle","h","hAxisTitle","header","headers","i","j","k","l","len","len1","len2","len3","len4","len5","len6","m","metaboliteName","metabolites","metadata","n","numCharsInHAxis","numSeries","o","params","ref","ref1","ref2","ref3","ref4","ref5","renderArea","result","rotationAngle","rowKey","rowKeys","s","scatterData","series","title","titleText","vAxisTitle","vals","x","xs","console","log","localeStrings","vs","by","extend","size","width","window","innerWidth","height","innerHeight","type","horizontal","stacked","getRowKeys","length","push","getColKeys","results","join","aggregatorName","valAttrs","y","t","rowAttrs","concat","colAttrs","slice","getAggregator","value","format","input","indexOf","style","text","axis","rotated","label","tick","rotate","multiline","data","order","tooltip","grouped","color","pattern","fit","legend","show","name","b","d","len7","p","shift","unshift","rows","groups","appendTo","bindto","generate","detach","remove","append","pivotUtilities","c3_renderers","Bar Chart","Line Chart","call","this"],"mappings":"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","file":"c3_renderers.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\"), require(\"c3\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\", \"c3\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery, c3\n\ncallWithJQuery ($, c3) ->\n\n    makeC3Chart = (chartOpts = {}) -> (pivotData, opts) ->\n        console.log(\"this is \")\n        defaults =\n            localeStrings: {vs: \"vs\", by: \"by\"}\n            c3: {}\n\n        opts = $.extend(true, {}, defaults, opts)\n        opts.c3.size ?= {}\n        opts.c3.size.width ?= window.innerWidth / 1.4\n        opts.c3.size.height ?= window.innerHeight / 1.4 - 50\n        chartOpts.type ?= \"line\"\n        chartOpts.horizontal ?= false\n        chartOpts.stacked ?= false\n\n        rowKeys = pivotData.getRowKeys() # state\n        rowKeys.push [] if rowKeys.length == 0\n        colKeys = pivotData.getColKeys() # intensities\n        colKeys.push [] if colKeys.length == 0\n\n        headers = (h.join(\"-\") for h in colKeys) # intensities\n        rotationAngle = 0\n\n        fullAggName = pivotData.aggregatorName\n        if pivotData.valAttrs.length\n            fullAggName += \"(#{pivotData.valAttrs.join(\", \")})\"\n\n        if chartOpts.type == \"scatter\"\n            scatterData = x:{}, y:{}, t:{}\n            attrs = pivotData.rowAttrs.concat(pivotData.colAttrs)\n            # console.log(attrs)\n            vAxisTitle = attrs[0] ? \"\"\n            hAxisTitle = attrs[1] ? \"\"\n            groupByTitle = attrs.slice(2).join(\"-\")\n            titleText = vAxisTitle\n            titleText += \" #{opts.localeStrings.vs} #{hAxisTitle}\" if hAxisTitle != \"\"\n            titleText += \" #{opts.localeStrings.by} #{groupByTitle}\" if groupByTitle != \"\"\n            for rowKey in rowKeys\n                for colKey in colKeys\n                    agg = pivotData.getAggregator(rowKey, colKey)\n                    # console.log(pivotData)\n                    if agg.value()?\n                        vals = rowKey.concat(colKey)\n                        series = vals.slice(2).join(\"-\")\n                        if series == \"\" then series = \"series\"\n                        scatterData.x[series] ?= []\n                        scatterData.y[series] ?= []\n                        scatterData.t[series] ?= []\n                        scatterData.y[series].push vals[0] ? 0\n                        scatterData.x[series].push vals[1] ? 0\n                        scatterData.t[series].push agg.format(agg.value())\n        else\n            numCharsInHAxis = 0\n            for x in headers\n                numCharsInHAxis += x.length\n            if numCharsInHAxis > 50\n                rotationAngle = 45\n\n            metabolites = []\n            columns = [\n                ['x']\n            ]\n\n            for header in headers\n                columns[0].push header\n            \n            a = pivotData.rowAttrs[0]\n            console.log(a)\n            for metadata in pivotData.input\n                if metadata[a].indexOf(columns) != 1\n                    columns.push([metadata[a]])\n            \n            console.log(columns)\n            for metaboliteName in columns\n                for metadata in pivotData.input\n                    if metaboliteName[0] == metadata[a]\n                        metaboliteName.push metadata[pivotData['aggregatorName']]\n\n            # for rowKey in rowKeys\n            #     rowHeader = rowKey.join(\"-\")\n            #     row = [if rowHeader == \"\" then fullAggName else rowHeader]\n            #     for colKey in colKeys\n            #         # if colKey < 1000\n            #         # val = parseFloat  pivotData.getAggregator(rowKey, colKey).value()\n            #         # if isFinite(val)\n            #         #     if val < 1\n            #         #         row.push val.toPrecision(3)\n            #         #     else\n            #         #         row.push val.toFixed(3)\n            #         # else\n            #         #     row.push null\n            #         row.push colKey\n                # columns.push row\n\n                # console.log(columns)\n\n            vAxisTitle = fullAggName\n\n            if chartOpts.horizontal\n                hAxisTitle = pivotData.rowAttrs.join(\"-\")\n                groupByTitle = pivotData.colAttrs.join(\"-\")\n            else\n                hAxisTitle = pivotData.colAttrs.join(\"-\")\n                groupByTitle = pivotData.rowAttrs.join(\"-\")\n            titleText = fullAggName\n            titleText += \" #{opts.localeStrings.vs} #{hAxisTitle}\" if hAxisTitle != \"\"\n            titleText += \" #{opts.localeStrings.by} #{groupByTitle}\" if groupByTitle != \"\"\n\n        title = $(\"<p>\", {style: \"text-align: center; font-weight: bold\"})\n        title.text(titleText)\n\n        params =\n            axis:\n                rotated: chartOpts.horizontal\n                y:\n                    label: vAxisTitle\n                x:\n                    label: hAxisTitle\n                    tick:\n                        rotate: rotationAngle\n                        multiline: false\n            data:\n                x: 'x'\n                type: chartOpts.type\n                order: null\n            tooltip:\n                grouped: false\n            color:\n                pattern: [ \"#3366cc\", \"#dc3912\", \"#ff9900\", \"#109618\",\n                           \"#990099\", \"#0099c6\", \"#dd4477\", \"#66aa00\",\n                           \"#b82e2e\", \"#316395\", \"#994499\", \"#22aa99\",\n                           \"#aaaa11\", \"#6633cc\", \"#e67300\", \"#8b0707\",\n                           \"#651067\", \"#329262\", \"#5574a6\", \"#3b3eac\" ]\n\n\n        params = $.extend(true, {}, params, opts.c3)\n\n        if chartOpts.type == \"scatter\"\n            xs = {}\n            numSeries = 0\n            dataColumns = []\n            for s of scatterData.x\n                numSeries += 1\n                xs[s] = s+\"_x\"\n                dataColumns.push [s+\"_x\"].concat(scatterData.x[s])\n                dataColumns.push [s].concat(scatterData.y[s])\n            params.data.xs = xs\n            params.data.columns = dataColumns\n            params.axis.x.tick = fit: false\n            if numSeries == 1\n                params.legend = show: false\n            params.tooltip.format =\n                title: -> fullAggName\n                name: -> \"\"\n                value: (a,b,c,d) -> scatterData.t[c][d]\n        else\n            params.axis.x.type= 'category'\n\n            if chartOpts.horizontal\n                categories = (c.shift() for c in columns)\n                if categories.length == 1 and categories[0] == fullAggName\n                    categories = [\"\"]\n                params.axis.x.categories = categories\n                if headers.length == 1 and headers[0] == \"\"\n                    headers = [fullAggName]\n                columns.unshift(headers)\n                params.data.rows = columns\n            else\n                console.log(params)\n                # params.axis.x.categories = headers\n                console.log(columns)\n                params.data.columns = columns\n\n\n        if chartOpts.stacked\n            if chartOpts.horizontal\n                params.data.groups = [x.join(\"-\") for x in colKeys]\n            else\n                params.data.groups = [x.join(\"-\") for x in rowKeys]\n\n        renderArea = $(\"<div>\", style: \"display:none;\").appendTo $(\"body\")\n        result = $(\"<div>\").appendTo renderArea\n        params.bindto = result[0]\n        console.log(c3.generate)\n        c3.generate params\n        result.detach()\n        renderArea.remove()\n        return $(\"<div>\").append title, result\n\n    $.pivotUtilities.c3_renderers =\n        # \"Horizontal Bar Chart\": makeC3Chart(type: \"bar\", horizontal: true)\n        # \"Horizontal Stacked Bar Chart\": makeC3Chart(type: \"bar\", stacked: true, horizontal: true)\n        \"Bar Chart\": makeC3Chart(type: \"bar\")\n        # \"Stacked Bar Chart\": makeC3Chart(type: \"bar\", stacked: true)\n        \"Line Chart\": makeC3Chart()\n        # \"Area Chart\": makeC3Chart(type: \"area\", stacked: true)\n        # \"Scatter Chart\": makeC3Chart(type: \"scatter\")\n        # \"Pie Chart\": makeC3Chart(type: \"pie\")\n        # \"Volcano Chart\": makeC3Chart(type: \"volcano\")\n","(function() {\n  var callWithJQuery;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"), require(\"c3\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\", \"c3\"], pivotModule);\n    } else {\n      return pivotModule(jQuery, c3);\n    }\n  };\n\n  callWithJQuery(function($, c3) {\n    var makeC3Chart;\n    makeC3Chart = function(chartOpts) {\n      if (chartOpts == null) {\n        chartOpts = {};\n      }\n      return function(pivotData, opts) {\n        var a, agg, attrs, base, base1, base2, base3, base4, base5, c, categories, colKey, colKeys, columns, dataColumns, defaults, fullAggName, groupByTitle, h, hAxisTitle, header, headers, i, j, k, l, len, len1, len2, len3, len4, len5, len6, m, metaboliteName, metabolites, metadata, n, numCharsInHAxis, numSeries, o, params, ref, ref1, ref2, ref3, ref4, ref5, renderArea, result, rotationAngle, rowKey, rowKeys, s, scatterData, series, title, titleText, vAxisTitle, vals, x, xs;\n        console.log(\"this is \");\n        defaults = {\n          localeStrings: {\n            vs: \"vs\",\n            by: \"by\"\n          },\n          c3: {}\n        };\n        opts = $.extend(true, {}, defaults, opts);\n        if ((base = opts.c3).size == null) {\n          base.size = {};\n        }\n        if ((base1 = opts.c3.size).width == null) {\n          base1.width = window.innerWidth / 1.4;\n        }\n        if ((base2 = opts.c3.size).height == null) {\n          base2.height = window.innerHeight / 1.4 - 50;\n        }\n        if (chartOpts.type == null) {\n          chartOpts.type = \"line\";\n        }\n        if (chartOpts.horizontal == null) {\n          chartOpts.horizontal = false;\n        }\n        if (chartOpts.stacked == null) {\n          chartOpts.stacked = false;\n        }\n        rowKeys = pivotData.getRowKeys();\n        if (rowKeys.length === 0) {\n          rowKeys.push([]);\n        }\n        colKeys = pivotData.getColKeys();\n        if (colKeys.length === 0) {\n          colKeys.push([]);\n        }\n        headers = (function() {\n          var i, len, results;\n          results = [];\n          for (i = 0, len = colKeys.length; i < len; i++) {\n            h = colKeys[i];\n            results.push(h.join(\"-\"));\n          }\n          return results;\n        })();\n        rotationAngle = 0;\n        fullAggName = pivotData.aggregatorName;\n        if (pivotData.valAttrs.length) {\n          fullAggName += \"(\" + (pivotData.valAttrs.join(\", \")) + \")\";\n        }\n        if (chartOpts.type === \"scatter\") {\n          scatterData = {\n            x: {},\n            y: {},\n            t: {}\n          };\n          attrs = pivotData.rowAttrs.concat(pivotData.colAttrs);\n          vAxisTitle = (ref = attrs[0]) != null ? ref : \"\";\n          hAxisTitle = (ref1 = attrs[1]) != null ? ref1 : \"\";\n          groupByTitle = attrs.slice(2).join(\"-\");\n          titleText = vAxisTitle;\n          if (hAxisTitle !== \"\") {\n            titleText += \" \" + opts.localeStrings.vs + \" \" + hAxisTitle;\n          }\n          if (groupByTitle !== \"\") {\n            titleText += \" \" + opts.localeStrings.by + \" \" + groupByTitle;\n          }\n          for (i = 0, len = rowKeys.length; i < len; i++) {\n            rowKey = rowKeys[i];\n            for (j = 0, len1 = colKeys.length; j < len1; j++) {\n              colKey = colKeys[j];\n              agg = pivotData.getAggregator(rowKey, colKey);\n              if (agg.value() != null) {\n                vals = rowKey.concat(colKey);\n                series = vals.slice(2).join(\"-\");\n                if (series === \"\") {\n                  series = \"series\";\n                }\n                if ((base3 = scatterData.x)[series] == null) {\n                  base3[series] = [];\n                }\n                if ((base4 = scatterData.y)[series] == null) {\n                  base4[series] = [];\n                }\n                if ((base5 = scatterData.t)[series] == null) {\n                  base5[series] = [];\n                }\n                scatterData.y[series].push((ref2 = vals[0]) != null ? ref2 : 0);\n                scatterData.x[series].push((ref3 = vals[1]) != null ? ref3 : 0);\n                scatterData.t[series].push(agg.format(agg.value()));\n              }\n            }\n          }\n        } else {\n          numCharsInHAxis = 0;\n          for (k = 0, len2 = headers.length; k < len2; k++) {\n            x = headers[k];\n            numCharsInHAxis += x.length;\n          }\n          if (numCharsInHAxis > 50) {\n            rotationAngle = 45;\n          }\n          metabolites = [];\n          columns = [['x']];\n          for (l = 0, len3 = headers.length; l < len3; l++) {\n            header = headers[l];\n            columns[0].push(header);\n          }\n          a = pivotData.rowAttrs[0];\n          console.log(a);\n          ref4 = pivotData.input;\n          for (m = 0, len4 = ref4.length; m < len4; m++) {\n            metadata = ref4[m];\n            if (metadata[a].indexOf(columns) !== 1) {\n              columns.push([metadata[a]]);\n            }\n          }\n          console.log(columns);\n          for (n = 0, len5 = columns.length; n < len5; n++) {\n            metaboliteName = columns[n];\n            ref5 = pivotData.input;\n            for (o = 0, len6 = ref5.length; o < len6; o++) {\n              metadata = ref5[o];\n              if (metaboliteName[0] === metadata[a]) {\n                metaboliteName.push(metadata[pivotData['aggregatorName']]);\n              }\n            }\n          }\n          vAxisTitle = fullAggName;\n          if (chartOpts.horizontal) {\n            hAxisTitle = pivotData.rowAttrs.join(\"-\");\n            groupByTitle = pivotData.colAttrs.join(\"-\");\n          } else {\n            hAxisTitle = pivotData.colAttrs.join(\"-\");\n            groupByTitle = pivotData.rowAttrs.join(\"-\");\n          }\n          titleText = fullAggName;\n          if (hAxisTitle !== \"\") {\n            titleText += \" \" + opts.localeStrings.vs + \" \" + hAxisTitle;\n          }\n          if (groupByTitle !== \"\") {\n            titleText += \" \" + opts.localeStrings.by + \" \" + groupByTitle;\n          }\n        }\n        title = $(\"<p>\", {\n          style: \"text-align: center; font-weight: bold\"\n        });\n        title.text(titleText);\n        params = {\n          axis: {\n            rotated: chartOpts.horizontal,\n            y: {\n              label: vAxisTitle\n            },\n            x: {\n              label: hAxisTitle,\n              tick: {\n                rotate: rotationAngle,\n                multiline: false\n              }\n            }\n          },\n          data: {\n            x: 'x',\n            type: chartOpts.type,\n            order: null\n          },\n          tooltip: {\n            grouped: false\n          },\n          color: {\n            pattern: [\"#3366cc\", \"#dc3912\", \"#ff9900\", \"#109618\", \"#990099\", \"#0099c6\", \"#dd4477\", \"#66aa00\", \"#b82e2e\", \"#316395\", \"#994499\", \"#22aa99\", \"#aaaa11\", \"#6633cc\", \"#e67300\", \"#8b0707\", \"#651067\", \"#329262\", \"#5574a6\", \"#3b3eac\"]\n          }\n        };\n        params = $.extend(true, {}, params, opts.c3);\n        if (chartOpts.type === \"scatter\") {\n          xs = {};\n          numSeries = 0;\n          dataColumns = [];\n          for (s in scatterData.x) {\n            numSeries += 1;\n            xs[s] = s + \"_x\";\n            dataColumns.push([s + \"_x\"].concat(scatterData.x[s]));\n            dataColumns.push([s].concat(scatterData.y[s]));\n          }\n          params.data.xs = xs;\n          params.data.columns = dataColumns;\n          params.axis.x.tick = {\n            fit: false\n          };\n          if (numSeries === 1) {\n            params.legend = {\n              show: false\n            };\n          }\n          params.tooltip.format = {\n            title: function() {\n              return fullAggName;\n            },\n            name: function() {\n              return \"\";\n            },\n            value: function(a, b, c, d) {\n              return scatterData.t[c][d];\n            }\n          };\n        } else {\n          params.axis.x.type = 'category';\n          if (chartOpts.horizontal) {\n            categories = (function() {\n              var len7, p, results;\n              results = [];\n              for (p = 0, len7 = columns.length; p < len7; p++) {\n                c = columns[p];\n                results.push(c.shift());\n              }\n              return results;\n            })();\n            if (categories.length === 1 && categories[0] === fullAggName) {\n              categories = [\"\"];\n            }\n            params.axis.x.categories = categories;\n            if (headers.length === 1 && headers[0] === \"\") {\n              headers = [fullAggName];\n            }\n            columns.unshift(headers);\n            params.data.rows = columns;\n          } else {\n            console.log(params);\n            console.log(columns);\n            params.data.columns = columns;\n          }\n        }\n        if (chartOpts.stacked) {\n          if (chartOpts.horizontal) {\n            params.data.groups = [\n              (function() {\n                var len7, p, results;\n                results = [];\n                for (p = 0, len7 = colKeys.length; p < len7; p++) {\n                  x = colKeys[p];\n                  results.push(x.join(\"-\"));\n                }\n                return results;\n              })()\n            ];\n          } else {\n            params.data.groups = [\n              (function() {\n                var len7, p, results;\n                results = [];\n                for (p = 0, len7 = rowKeys.length; p < len7; p++) {\n                  x = rowKeys[p];\n                  results.push(x.join(\"-\"));\n                }\n                return results;\n              })()\n            ];\n          }\n        }\n        renderArea = $(\"<div>\", {\n          style: \"display:none;\"\n        }).appendTo($(\"body\"));\n        result = $(\"<div>\").appendTo(renderArea);\n        params.bindto = result[0];\n        console.log(c3.generate);\n        c3.generate(params);\n        result.detach();\n        renderArea.remove();\n        return $(\"<div>\").append(title, result);\n      };\n    };\n    return $.pivotUtilities.c3_renderers = {\n      \"Bar Chart\": makeC3Chart({\n        type: \"bar\"\n      }),\n      \"Line Chart\": makeC3Chart()\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=c3_renderers.js.map\n"]}